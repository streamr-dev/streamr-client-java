import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
	repositories {
		jcenter()
	}
}
plugins {
	id 'java-library'
	id 'groovy-gradle-plugin'
	id 'groovy'
	id 'idea'
	id 'eclipse'
	id 'maven-publish'
	id 'jacoco'
	id 'codenarc'
	id 'pmd'
	id 'com.github.ben-manes.versions' version '0.36.0'
	id 'com.diffplug.spotless' version '5.9.0'
	id 'org.unbroken-dome.test-sets' version '3.0.1'
}

group = 'com.streamr'
version = '2.0.3-alpha.3'
description = 'A Java library to interact with Streamr Network'

final boolean isLocalDevEnv = (System.getenv("CI") == null)

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		groovy {
			srcDirs = []
		}
	}
	test {
		groovy {
			srcDirs = ['src/test/java', 'src/test/groovy']
		}
	}
}
// https://github.com/unbroken-dome/gradle-testsets-plugin
testSets {
	integrationTest { extendsFrom unitTest }
}
check.dependsOn integrationTest
// https://docs.gradle.org/current/userguide/jacoco_plugin.html
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}
jacoco {
	toolVersion = '0.8.6'
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/reports/coverage")
	}
}
// https://docs.gradle.org/current/userguide/codenarc_plugin.html
codenarc {
	configFile = file("${project.projectDir}/gradle/config/codenarc/codenarc.xml")
	ignoreFailures = false
	reportFormat = 'html'
	reportsDir = file("${project.projectDir}/build/reports/codenarc")
	maxPriority1Violations = 1
	maxPriority2Violations = 2
	maxPriority3Violations = 4
}
// https://docs.gradle.org/current/userguide/pmd_plugin.html
pmd {
	toolVersion = '6.30.0'
	consoleOutput = isLocalDevEnv
	ignoreFailures = false
	rulesMinimumPriority = 5
	ruleSets = ["${project.projectDir}/gradle/config/pmd/ruleset.xml"]
}
tasks.withType(Test) {
	useJUnitPlatform {
		systemProperties = [
				'junit.jupiter.extensions.autodetection.enabled': 'true',
				'junit.jupiter.testinstance.lifecycle.default': 'per_class',
				'junit.jupiter.execution.timeout.default': '3 m',
		]
	}
	testLogging {
		events = [
				TestLogEvent.SKIPPED,
				TestLogEvent.FAILED,
		]
		exceptionFormat TestExceptionFormat.SHORT
		if (isLocalDevEnv) {
			exceptionFormat TestExceptionFormat.FULL
			events += TestLogEvent.PASSED
		}
		info {
			events = [
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.FAILED,
			]
			exceptionFormat TestExceptionFormat.FULL
		}
		debug {
			events = [
					TestLogEvent.STANDARD_OUT,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STARTED,
					TestLogEvent.SKIPPED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
			]
			exceptionFormat TestExceptionFormat.FULL
		}
	}
}
java {
	sourceCompatibility(JavaVersion.VERSION_1_8)
	targetCompatibility(JavaVersion.VERSION_1_8)
	withJavadocJar()
	withSourcesJar()
}
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs += [
			'-Werror',
			'-Xlint:auxiliaryclass',
			'-Xlint:cast',
			'-Xlint:classfile',
			'-Xlint:deprecation',
			'-Xlint:dep-ann',
			'-Xlint:divzero',
			'-Xlint:empty',
			'-Xlint:fallthrough',
			'-Xlint:finally',
			'-Xlint:options',
			'-Xlint:overloads',
			'-Xlint:overrides',
			'-Xlint:path',
			'-Xlint:processing',
			'-Xlint:rawtypes',
			'-Xlint:-serial',
			'-Xlint:static',
			'-Xlint:try',
			'-Xlint:unchecked',
			'-Xlint:varargs',
	]
}
javadoc {
	options.encoding = 'UTF-8'
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

def jarManifest = [
		'Implementation-Title': "Streamr Java Client v${version}",
		'Implementation-Version': version,
]
jar {
	manifest {
		attributes(jarManifest)
	}
}
// https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
task fatJar(type: Jar) {
	description = 'Creates a Jar file with all dependencies included.'
	group = JavaBasePlugin.BUILD_TASK_NAME
	archiveClassifier = 'fat'

	manifest {
		attributes(jarManifest)
	}
	from sourceSets.main.output
	dependsOn configurations.compileClasspath
	from {
		configurations.compileClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
}
ext {
	slf4jApiVersion = '1.7.30'
	okHttpVersion = '4.9.0'
	moshiVersion = '1.11.0'
	moshiAdaptersVersion = '1.11.0'
	okIoVersion = '2.9.0'
	commonsLangVersion = '3.11'
	javaWebSocketVersion = '1.5.1'
	cache2kVersion = '1.6.0.Final'
	web3jVersion = '5.0.0'
	findbugsVersion = '3.0.2'
	jetbrainsVersion = '17.0.0'
	bouncyCastleVersion = '1.67'
	equalsVerifierVersion = '3.5.2'
	groovyVersion = '2.5.14'
	spockVersion = '1.3-groovy-2.5'
	byteBuddyVersion = '1.9.16'
	objenesisVersion = '3.1'
	junitJupiterVersion = '5.7.0'
	junitPlatformVersion = '1.7.0'
}
// https://docs.gradle.org/current/userguide/java_library_plugin.html
dependencies {
	implementation("org.slf4j:slf4j-api:${slf4jApiVersion}")
	implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
	implementation("com.squareup.moshi:moshi:${moshiVersion}")
	implementation("com.squareup.moshi:moshi-adapters:${moshiAdaptersVersion}")
	implementation("com.squareup.okio:okio:${okIoVersion}")
	implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
	implementation("org.java-websocket:Java-WebSocket:${javaWebSocketVersion}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("org.cache2k:cache2k-api:${cache2kVersion}")
	implementation("org.cache2k:cache2k-core:${cache2kVersion}")
	implementation("org.web3j:core:${web3jVersion}") {
		exclude group: 'com.squareup.okhttp3', module: 'okhttp'
		exclude group: 'org.java-websocket', module: 'Java-WebSocket'
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("com.google.code.findbugs:jsr305:${findbugsVersion}") // This project is dead?
	implementation("org.jetbrains:annotations:${jetbrainsVersion}") // This does nothing?
	implementation("org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}") {
		because 'Web3j has same dependency and EncryptionUtil requires PEM'
	}
	implementation("org.web3j:codegen:${web3jVersion}") // DO NOT USE! This should be a build time dep
	// Transitive dependencies leaked from other dependencies
	implementation("com.googlecode.json-simple:json-simple:1.1.1") // DO NOT USE! This should be a build time dep

	// Test dependencies below
	integrationTestImplementation sourceSets.test.output
	testImplementation("nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}")
	// Spock
	testImplementation("org.codehaus.groovy:groovy-all:${groovyVersion}")
	testImplementation("org.spockframework:spock-core:${spockVersion}")
	testImplementation("net.bytebuddy:byte-buddy:${byteBuddyVersion}")
	testImplementation("org.objenesis:objenesis:${objenesisVersion}")
	// End Spock
	testImplementation("nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
	testImplementation("org.junit.platform:junit-platform-commons:${junitPlatformVersion}")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}")
}
// https://docs.gradle.org/current/userguide/resolution_strategy_tuning.html
//configurations.all {
//	resolutionStrategy {
//		failOnVersionConflict()
//	}
//}
// https://docs.gradle.org/current/userguide/publishing_setup.html
publishing {
	publications {
		clientWithSourceAndJavadoc(MavenPublication) {
			artifactId = 'client'
			groupId project.group
			version project.version
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'Streamr Java Client Library'
				description = project.description
				url = 'https://streamr.network'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'hpihkala'
						name = 'Henri Pihkala'
						email = 'henri.pihkala@streamr.com'
					}
					developer {
						id = 'kare'
						name = 'Kare Nuorteva'
						email = 'kare.nuorteva@streamr.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/streamr-dev/streamr-client-java'
					developerConnection = 'scm:git:ssh://github.com/streamr-dev/streamr-client-javat'
					url = 'https://github.com/streamr-dev/streamr-client-java'
				}
			}
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/streamr-dev/streamr-client-java")
			credentials {
				username = project.findProperty("github.user") ?: System.getenv("USERNAME")
				password = project.findProperty("github.apikey") ?: System.getenv("GITHUB_TOKEN")
			}
		}
	}
}
// https://github.com/diffplug/spotless/tree/main/plugin-gradle
// https://github.com/google/google-java-format
// https://google.github.io/styleguide/javaguide.html
// Enable below once ratchetFrom is removed
// compileJava.dependsOn 'spotlessApply'
spotless {
	ratchetFrom 'origin/master'
	format 'misc', {
		target '**/*.gradle', '.gitignore'

		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target rootProject.fileTree('.') {
			include 'src/*/java/**/*.java'
			include 'src/*/groovy/**/*.java'
			exclude 'src/main/java/com/streamr/client/dataunion/contracts/**'
		}
		googleJavaFormat('1.7')
	}
}
