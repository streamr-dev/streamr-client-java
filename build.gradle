def VERSION = '2.0.2'

group 'com.streamr'
version VERSION

buildscript {
	repositories {
		mavenLocal()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.netflix.nebula:nebula-project-plugin:3.4.0"
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'nebula.facet'                    // Healthy defaults for a standard project
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

facets {
	integrationTest
}

sourceSets {
	test {
		groovy
	}
}

repositories {
	mavenCentral()
	// Ethereum Repository
	maven {
		url "https://dl.bintray.com/ethereum/maven/"
	}
}

dependencies {
	compile 'org.slf4j:slf4j-api:1.7.30'
	compile 'com.squareup.okhttp3:okhttp:4.9.0'
	compile 'com.squareup.moshi:moshi:1.11.0'
	compile 'com.squareup.moshi:moshi-adapters:1.11.0'
	compile 'com.squareup.okio:okio:2.9.0'
	compile 'commons-codec:commons-codec:1.6'
	compile 'commons-lang:commons-lang:2.6'
	compile 'org.apache.commons:commons-lang3:3.1'
	compile 'org.ethereum:ethereumj-core:1.11.0-RELEASE'
	compile "org.java-websocket:Java-WebSocket:1.4.1"
	compile "org.cache2k:cache2k-api:1.2.1.Final"
	compile "org.cache2k:cache2k-core:1.2.1.Final"
	compile "org.web3j:core:5.0.0"
	compile "org.web3j:codegen:5.0.0"

	testCompile 'org.apache.logging.log4j:log4j-api:2.14.0'
	testCompile 'org.apache.logging.log4j:log4j-core:2.14.0'
	testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.0'
	testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
	testCompile 'cglib:cglib-nodep:3.2.12'
	testCompile 'org.objenesis:objenesis:3.1'
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

jar {
	manifest {
		attributes(
				'Implementation-Version': version
		)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar, sourcesJar
}

task fatJar(type: Jar) {
	manifest {
		attributes(
				'Implementation-Version': version
		)
	}
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

archivesBaseName='client'

signing {
	sign configurations.archives
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'com.streamr'
			artifactId = 'client'
			version = VERSION

			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}

/*
uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'Streamr Java Client Library'
				packaging 'jar'
				// optionally artifactId can be defined here
				description 'A Java library to interact with Streamr'
				url 'https://www.streamr.com/'

				scm {
					connection 'scm:git:git://github.com/streamr-dev/streamr-client-java'
					developerConnection 'scm:git:ssh://github.com/streamr-dev/streamr-client-java'
					url 'https://github.com/streamr-dev/streamr-client-java'
				}

				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id 'hpihkala'
						name 'Henri Pihkala'
						email 'henri.pihkala@streamr.com'
					}
				}
			}
		}
	}
}
*/
