package com.streamr.client.dataunion.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class HomeAMB extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50613738806100206000396000f3006080604052600436106101d45763ffffffff60e060020a6000350416630ac1c31381146101d95780630cbf0601146102005780631544298e14610218578063163cef351461022d5780631812d9961461029d57806325fbf4ee1461032d578063392e53cd1461037a5780633f0a9f651461038f5780633f768c06146103a45780633f9a8e7e146103fd578063437764df14610431578063467ad35a14610478578063490a32c6146104955780634a610b04146104ad578063630cea8e146104c5578063669f618b146104f15780636ae1a976146105065780637698da241461051e5780637bac29c7146105365780638d0680431461054e5780638da5cb5b146105635780638f4b4b981461057857806394643f711461059057806399439089146105c05780639a454b99146105d55780639cb7595a146105ea5780639e307dff1461062b578063acf5c68914610640578063b075061114610658578063bf1fe4201461066d578063cb08a10c14610685578063d67bdd251461069d578063dae5f0fd146106b2578063dc8601b3146106c7578063e37c328914610730578063e5789d0314610748578063e7a2c01f1461075d578063f2fde38b1461077d578063fe173b971461079e578063ffd19e8c146107b3575b600080fd5b3480156101e557600080fd5b506101ee6107cb565b60408051918252519081900360200190f35b34801561020c57600080fd5b506101ee6004356107db565b34801561022457600080fd5b506101ee6108a0565b34801561023957600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ee958335600160a060020a03169536956044949193909101919081908401838280828437509497505084359550505060209092013591506108ee9050565b3480156102a957600080fd5b506102b8600435602435610a21565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f25781810151838201526020016102da565b50505050905090810190601f16801561031f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033957600080fd5b50610366600435602435600160a060020a03604435811690606435906084359060a4359060c43516610bfe565b604080519115158252519081900360200190f35b34801561038657600080fd5b50610366610e72565b34801561039b57600080fd5b506101ee610ec3565b3480156103b057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ee943694929360249392840191908190840183828082843750949750610f119650505050505050565b34801561040957600080fd5b50610415600435610f2d565b60408051600160a060020a039092168252519081900360200190f35b34801561043d57600080fd5b50610446610ffc565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b34801561048457600080fd5b50610493600435602435611020565b005b3480156104a157600080fd5b506102b860043561104a565b3480156104b957600080fd5b50610415600435611055565b3480156104d157600080fd5b5061049360246004803582810192908201359181359182019101356110d9565b3480156104fd57600080fd5b506101ee611505565b34801561051257600080fd5b506101ee60043561152a565b34801561052a57600080fd5b506103666004356115ad565b34801561054257600080fd5b50610493600435611676565b34801561055a57600080fd5b506101ee6116df565b34801561056f57600080fd5b50610415611757565b34801561058457600080fd5b506103666004356117ae565b34801561059c57600080fd5b506101ee60048035600160a060020a03169060248035908101910135604435611832565b3480156105cc57600080fd5b5061041561187c565b3480156105e157600080fd5b506101ee6118d3565b3480156105f657600080fd5b506105ff611921565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b34801561063757600080fd5b506101ee61192b565b34801561064c57600080fd5b50610493600435611950565b34801561066457600080fd5b506101ee611978565b34801561067957600080fd5b506104936004356119c6565b34801561069157600080fd5b506103666004356119eb565b3480156106a957600080fd5b50610415611a6f565b3480156106be57600080fd5b506101ee611a94565b3480156106d357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ee958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450611ae29350505050565b34801561073c57600080fd5b506101ee600435611af9565b34801561075457600080fd5b506101ee611b7c565b34801561076957600080fd5b506104936004803560248101910135611bca565b34801561078957600080fd5b50610493600160a060020a0360043516611e56565b3480156107aa57600080fd5b506101ee611e7b565b3480156107bf57600080fd5b50610366600435611ec9565b60006107d5611505565b90505b90565b60008060008360405160200180807f6e756d4d657373616765735369676e656400000000000000000000000000000081525060110182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061085f5780518252601f199092019160209182019101610840565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205495945050505050565b7f67d6f42a1ed69c62022f2d160ddc6f2f0acd37ad1db0c24f4702d7d3343a4add60009081526020527ff6c66672b1a9fe5622677597b0da8fd180a2c85696efbcf7fe4b1e0f4f0f61085490565b600080606080826108fd611505565b1461090757600080fd5b61091087610f11565b86101580156109265750610922611b7c565b8611155b151561093157600080fd5b61093c888787611ef1565b915061095161094961208d565b6001016120db565b6020820151925081876040516020018083805190602001908083835b6020831061098c5780518252601f19909201916020918201910161096d565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106109d45780518252601f1990920191602091820191016109b5565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050610a158382612132565b50909695505050505050565b604080516020808201859052818301849052825180830384018152606092830193849052805192936000939192909182918401908083835b60208310610a785780518252601f199092019160209182019101610a59565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f7369676e6174757265730000000000000000000000000000000000000000000083830152602a80840182905285518085039091018152604a9093019485905282519097506003965060009550919392508291908401908083835b60208310610b195780518252601f199092019160209182019101610afa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505091505092915050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6fde8202000000000000000000000000000000000000000000000000000000001781529151815160009330939291829190808383895b83811015610c7f578181015183820152602001610c67565b50505050905090810190601f168015610cac5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19150501580610d3e575030600160a060020a0316636fde82026040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d0657600080fd5b505af1158015610d1a573d6000803e3d6000fd5b505050506040513d6020811015610d3057600080fd5b5051600160a060020a031633145b80610d4857503330145b1515610d5357600080fd5b610d5b610e72565b15610d6557600080fd5b610d6e866121cf565b1515610d7957600080fd5b610d8388886121d7565b7fab54f3fbbe62c59b7876a9bf9bd5e0c22dbae93f4d8ee0438f7ce62b198eb0e0805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617905560006020819052437fe66bef0282a446f9848e2903380099bb6e431483ee78778868f33b4a154c818b557f2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf07597490527f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa610859055610e4484612327565b610e4d836123ad565b610e5682612440565b610e5e612517565b610e66610e72565b98975050505050505050565b7f0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba60005260046020527f078d888f9b66f3f8bfa10909e31f1e16240db73449f0500afdbbe3a70da457cc5460ff1690565b7f916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d7940723007160009081526020527fd2ea0feb732edb0ffe32efd33a6b9d24d46b16eb34a4d07ce256537b6f131e425490565b8051600090610f2790601063ffffffff61256e16565b92915050565b6000600260008360405160200180807f6661696c65644d6573736167655265636569766572000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b60208310610fb25780518252601f199092019160209182019101610f93565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054600160a060020a031695945050505050565b7f2544fbb90000000000000000000000000000000000000000000000000000000090565b611028611757565b600160a060020a0316331461103c57600080fd5b61104682826121d7565b5050565b6060610f2782612597565b6000600260008360405160200180807f6661696c65644d65737361676553656e64657200000000000000000000000000815250601301826000191660001916815260200191505060405160208183030381529060405260405180828051906020019080838360208310610fb25780518252601f199092019160209182019101610f93565b60008060008060006110e961187c565b600160a060020a031663facd743b336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561114357600080fd5b505af1158015611157573d6000803e3d6000fd5b505050506040513d602081101561116d57600080fd5b5051151561117a57600080fd5b6111e489898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c9250829150840183828082843750600194506126ff9350505050565b600160a060020a031633146111f857600080fd5b8686604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b6020831061124e5780518252601f19909201916020918201910161122f565b51815160209384036101000a600019018019909216911617905260408051929094018290038220336c0100000000000000000000000002838301526034808401829052855180850390910181526054909301948590528251909b509195509293508392850191508083835b602083106112d85780518252601f1990920191602091820191016112b9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209350611310856107db565b925061131b83611ec9565b1561132557600080fd5b60019283019283111561134a5761133b846117ae565b1561134557600080fd5b611384565b6113848588888080601f016020809104026020016040519081016040528093929190818152602001838380828437506127fe945050505050565b61138f8460016128d5565b846113a184600163ffffffff6129a716565b604080516020808201949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b602083106113f55780518252601f1990920191602091820191016113d6565b51815160209384036101000a600019018019909216911617905260408051929094018290038220601f8f018290048202830182019094528d82529296506114569450869350918d91508c9081908401838280828437506129b9945050505050565b6114608584612a3c565b60408051868152905133917fbf06885f40778f5ccfb64497d3f92ce568ddaedb7e2fb4487f72690418cf8e4c919081900360200190a261149e6116df565b90508083106114fa576114b9856114b485612b01565b612a3c565b604080513381526020810187905280820183905290517f415557404d88a0c0b8e3b16967cafffc511213fd9c465c16832ee17ed57d72379181900360600190a15b505050505050505050565b7fe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe650833045490565b60008060008360405160200180807f6e756d41666669726d6174696f6e735369676e6564000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061085f5780518252601f199092019160209182019101610840565b6000600460008360405160200180807f61666669726d6174696f6e735369676e6564000000000000000000000000000081525060120182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106116325780518252601f199092019160209182019101611613565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205460ff1695945050505050565b61167e611757565b600160a060020a0316331461169257600080fd5b7f2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf07597460009081526020527f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa61055565b60006116e961187c565b600160a060020a0316638d0680436040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561172657600080fd5b505af115801561173a573d6000803e3d6000fd5b505050506040513d602081101561175057600080fd5b5051905090565b7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060005260026020527fb7802e97e87ef2842a6cce7da7ffaeaedaa2f61a6a7870b23d9d01fc9b73712e54600160a060020a031690565b6000600460008360405160200180807f6d657373616765735369676e6564000000000000000000000000000000000000815250600e018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106116325780518252601f199092019160209182019101611613565b60006118738585858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508460806108ee565b95945050505050565b7f5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe60005260026020527fab54f3fbbe62c59b7876a9bf9bd5e0c22dbae93f4d8ee0438f7ce62b198eb0e054600160a060020a031690565b7fb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b060009081526020527fe66bef0282a446f9848e2903380099bb6e431483ee78778868f33b4a154c818b5490565b6005806000909192565b7f7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d25490565b611958611757565b600160a060020a0316331461196c57600080fd5b611975816123ad565b50565b7fbbd454018e72a3f6c02bbd785bacc49e46292744f3f6761276723823aa33232060009081526020527f242329173dfc316001df0a0c3d5a8f58a7ffb1a8b7d99c268303b9a741bacdf95490565b6119ce611757565b600160a060020a031633146119e257600080fd5b61197581612327565b6000600460008360405160200180807f6d65737361676543616c6c5374617475730000000000000000000000000000008152506011018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106116325780518252601f199092019160209182019101611613565b7f7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b5490565b7f1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee560009081526020527fd5c78dd9468716ca9bb96be25d56436811b20aab3523a9904b12deef1cab239d5490565b6000611af184848460006108ee565b949350505050565b60008060008360405160200180807f6661696c65644d6573736167654461746148617368000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061085f5780518252601f199092019160209182019101610840565b7f2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf07597460009081526020527f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa6105490565b6000806000611bd761187c565b600160a060020a031663facd743b336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015611c3157600080fd5b505af1158015611c45573d6000803e3d6000fd5b505050506040513d6020811015611c5b57600080fd5b50511515611c6857600080fd5b8484604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310611cbe5780518252601f199092019160209182019101611c9f565b51815160209384036101000a600019018019909216911617905260408051929094018290038220336c01000000000000000000000000028383015260348084018290528551808503909101815260549093019485905282519099509195509293508392850191508083835b60208310611d485780518252601f199092019160209182019101611d29565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150611d80826115ad565b15611d8a57600080fd5b611d95826001612b26565b611d9e8361152a565b9050611da981611ec9565b15611db357600080fd5b600101611dc08382612ba9565b60408051848152905133917f5df9cc3eb93d8a9a481857a3b70a8ca966e6b80b25cf0ee2cce180ec5afa80a1919081900360200190a2611dfe6116df565b8110611e4f57611e1683611e1183612b01565b612ba9565b611e4f85858080601f01602080910402602001604051908101604052809392919081815260200183838082843750612c2b945050505050565b5050505050565b611e5e611757565b600160a060020a03163314611e7257600080fd5b61197581612440565b7f55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b60009081526020527ff7d5eefab3776d7f0450bd0193564bcb4f832ce313ff2836c450fc63a4b944195490565b7f80000000000000000000000000000000000000000000000000000000000000009081161490565b60606000806000806000806000611f066108a0565b9650611f10612caa565b9550611f1a611978565b9450611f24612cf8565b93507e050000000000000000000000000000000000000000000000000000000000009250611f5061208d565b6040805160208082018b90526c0100000000000000000000000030028284015282516034818403018152605490920192839052815167ffffffffffffffff949094169550909282918401908083835b60208310611fbe5780518252601f199092019160209182019101611f9f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffff00000000000000006001021690508386604f01016040519080825280601f01601f191660200182016040528015612041578160200160208202803883390190505b50975087518801858152878582035289604f8a015284604e8a015286604d8a01528a604c8a01528b60488a01523360348a0152828217841760208a015250505050505050509392505050565b7f7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e175960009081526020527fa9b0f75b23e377b9b22d27feaca5d8a12329c0049ebce1dc695b905f3aa4cd005490565b7f7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e1759600090815260205267ffffffffffffffff167fa9b0f75b23e377b9b22d27feaca5d8a12329c0049ebce1dc695b905f3aa4cd0055565b604080516020808252835181830152835185937f520d2afde79cbd5db58755ac9480f81bc658e5c517fcae7365a3d832590b01839386939092839283019185019080838360005b83811015612191578181015183820152602001612179565b50505050905090810190601f1680156121be5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b6000903b1190565b6000806000806000861180156121ed5750600085115b15156121f857600080fd5b8585141561220557600080fd5b506000925082915060ff905060015b83158061221f575082155b156122675783158015612233575085828716145b1561223c578093505b8215801561224b575084828616145b15612254578092505b6101009190910260ff1790600101612214565b5050600060208190527ff6c66672b1a9fe5622677597b0da8fd180a2c85696efbcf7fe4b1e0f4f0f6108949094557f2f30286a16f86ee067618e1a246990e40c07b7749418a6dd3133f9cfb7e814cc919091557f242329173dfc316001df0a0c3d5a8f58a7ffb1a8b7d99c268303b9a741bacdf9919091557ffb792ae4ad11102b93f26a51b3749c2b3667f8b561566a4806d49896928115949091527f7b62b32ff48350e85ce95b571fde6f8b1096bc44a26db769ad6d0b3a26bf1c6d55565b7f55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b600090815260209081527ff7d5eefab3776d7f0450bd0193564bcb4f832ce313ff2836c450fc63a4b944198290556040805183815290517f52264b89e0fceafb26e79fd49ef8a366eb6297483bf4035b027f0c99a7ad512e929181900390910190a150565b600081116123ba57600080fd5b7f916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071600090815260209081527fd2ea0feb732edb0ffe32efd33a6b9d24d46b16eb34a4d07ce256537b6f131e428290556040805183815290517f4fb76205cd57c896b21511d2114137d8e901b4ccd659e1a0f97d6306795264fb929181900390910190a150565b600160a060020a038116151561245557600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061247e611757565b60408051600160a060020a03928316815291841660208301528051918290030190a17f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060005260026020527fb7802e97e87ef2842a6cce7da7ffaeaedaa2f61a6a7870b23d9d01fc9b73712e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b7f0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba60005260046020527f078d888f9b66f3f8bfa10909e31f1e16240db73449f0500afdbbe3a70da457cc805460ff19166001179055565b600082151561257f57506000610f27565b5081810281838281151561258f57fe5b0414610f2757fe5b6060600360008360405160200180807f6d6573736167657300000000000000000000000000000000000000000000000081525060080182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061261c5780518252601f1990920191602091820191016125fd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126f35780601f106126c8576101008083540402835291602001916126f3565b820191906000526020600020905b8154815290600101906020018083116126d657829003601f168201915b50505050509050919050565b6000806000808651604114151561271557600080fd5b505050602084015160408501516060860151601b60ff60f860020a83041614806127485750601c60ff60f860020a830416145b151561275357600080fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561278057600080fd5b600161278c8787612d46565b60408051600080825260208083018085529490945260ff60f860020a870416828401526060820188905260808201879052915160a08083019493601f198301938390039091019190865af11580156127e8573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b80600360008460405160200180807f6d6573736167657300000000000000000000000000000000000000000000000081525060080182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106128825780518252601f199092019160209182019101612863565b51815160001960209485036101000a019081169019919091161790526040805194909201849003909320865285830196909652509290930160002084516128d0959194509201919050613659565b505050565b80600460008460405160200180807f6d657373616765735369676e6564000000000000000000000000000000000000815250600e0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106129595780518252601f19909201916020918201910161293a565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020805460ff1916941515949094179093555050505050565b6000828211156129b357fe5b50900390565b80600360008460405160200180807f7369676e61747572657300000000000000000000000000000000000000000000815250600a018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106128825780518252601f199092019160209182019101612863565b806000808460405160200180807f6e756d4d657373616765735369676e656400000000000000000000000000000081525060110182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b60208310612abf5780518252601f199092019160209182019101612aa0565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020939093555050505050565b7f80000000000000000000000000000000000000000000000000000000000000001790565b80600460008460405160200180807f61666669726d6174696f6e735369676e656400000000000000000000000000008152506012018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106129595780518252601f19909201916020918201910161293a565b806000808460405160200180807f6e756d41666669726d6174696f6e735369676e65640000000000000000000000815250601501826000191660001916815260200191505060405160208183030381529060405260405180828051906020019080838360208310612abf5780518252601f199092019160209182019101612aa0565b6000806000806000612c3b6136d7565b6060612c4688612f60565b959c50939a509198509650945092509050612c6087613051565b1515612c6b57600080fd5b6020820151612c7990613097565b1515612c8457600080fd5b612ca086868963ffffffff8816878760006020020151876130a9565b5050505050505050565b7fe504ae1fd6471eea80f18b8532a61a9bb91fba4f5b837f80a1cfb6752350af4460009081526020527f2f30286a16f86ee067618e1a246990e40c07b7749418a6dd3133f9cfb7e814cc5490565b7ffb792ae4ad11102b93f26a51b3749c2b3667f8b561566a4806d498969281159460009081526020527f7b62b32ff48350e85ce95b571fde6f8b1096bc44a26db769ad6d0b3a26bf1c6d5490565b60408051808201909152601a81527f19457468657265756d205369676e6564204d6573736167653a0a000000000000602082015260009060608315612eec5781612d9086516130f6565b866040516020018084805190602001908083835b60208310612dc35780518252601f199092019160209182019101612da4565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310612e0b5780518252601f199092019160209182019101612dec565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612e535780518252601f199092019160209182019101612e34565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b60208310612eb85780518252601f199092019160209182019101612e99565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250612f58565b6040805190810160405280600381526020017f3130340000000000000000000000000000000000000000000000000000000000815250905081818660405160200180848051906020019080838360208310612dc35780518252601f199092019160209182019101612da4565b505092915050565b6000806000806000612f706136d7565b6060600080604f915060208a01519850600160a060020a0360348b015116975060548a01518060601c975063ffffffff8160401c16965080601a1a95506000607f87161115612fbe57600080fd5b8060181a6001808260031b1b03818501945080858e01511687528260191a91506001808360031b1b039050818501945080858e0151166020880152848d51039350505050806040519080825280601f01601f191660200182016040528015613030578160200160208202803883390190505b50925060248201915080826004350160208501375050919395979092949650565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167e0500000000000000000000000000000000000000000000000000000000000014919050565b60006130a16108a0565b909114919050565b60006130b9888884888a88613201565b90506130c586826132de565b8015156130ea576130d68683613361565b6130e0868861342e565b6130ea868961351c565b612ca08888888461359f565b6060600080828185151561313f5760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506131f8565b8593505b831561315a57600190920191600a84049350613143565b826040519080825280601f01601f191660200182016040528015613188578160200160208202803883390190505b5091505060001982015b85156131f457815160001982019160f860020a6030600a8a0601029184919081106131b957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86049550613192565b8194505b50505050919050565b60008061320d886135ed565b61321684613611565b61321f83613635565b8460405a603f0281151561322f57fe5b041161323a57600080fd5b86600160a060020a0316858760405180828051906020019080838360005b83811015613270578181015183820152602001613258565b50505050905090810190601f16801561329d5780820380516001836020036101000a031916815260200191505b5091505060006040518083038160008787f19250505090506132bf60006135ed565b6132c96000613611565b6132d36000613635565b979650505050505050565b80600460008460405160200180807f6d65737361676543616c6c5374617475730000000000000000000000000000008152506011018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106129595780518252601f19909201916020918201910161293a565b806040518082805190602001908083835b602083106133915780518252601f199092019160209182019101613372565b51815160001960209485036101000a01908116901991909116179052604080519490920184900384207f6661696c65644d657373616765446174614861736800000000000000000000008583015260358086018a90528351808703909101815260559095019283905284519096506000955085949350829184019080838360208310612abf5780518252601f199092019160209182019101612aa0565b80600260008460405160200180807f6661696c65644d6573736167655265636569766572000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106134b25780518252601f199092019160209182019101613493565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0395909516949094179093555050505050565b80600260008460405160200180807f6661696c65644d65737361676553656e646572000000000000000000000000008152506013018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106134b25780518252601f199092019160209182019101613493565b60408051821515815290518391600160a060020a0380871692908816917fe194ef610f9150a2db4110b3db5116fd623175dca3528d7ae7046a1042f84fe7919081900360200190a450505050565b7f7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b55565b7fe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe6508330455565b7f7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d255565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061369a57805160ff19168380011785556136c7565b828001600101855582156136c7579182015b828111156136c75782518255916020019190600101906136ac565b506136d39291506136f2565b5090565b60408051808201825290600290829080388339509192915050565b6107d891905b808211156136d357600081556001016136f85600a165627a7a72305820054239626193bd1da321a328a43f4d0bb02c37e049d704e24e77aafd26b38bf90029";

    public static final String FUNC_TRANSACTIONHASH = "transactionHash";

    public static final String FUNC_NUMMESSAGESSIGNED = "numMessagesSigned";

    public static final String FUNC_SOURCECHAINID = "sourceChainId";

    public static final String FUNC__SENDMESSAGE = "_sendMessage";

    public static final String FUNC_SIGNATURE = "signature";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISINITIALIZED = "isInitialized";

    public static final String FUNC_REQUIREDBLOCKCONFIRMATIONS = "requiredBlockConfirmations";

    public static final String FUNC_GETMINIMUMGASUSAGE = "getMinimumGasUsage";

    public static final String FUNC_FAILEDMESSAGERECEIVER = "failedMessageReceiver";

    public static final String FUNC_GETBRIDGEMODE = "getBridgeMode";

    public static final String FUNC_SETCHAINIDS = "setChainIds";

    public static final String FUNC_MESSAGE = "message";

    public static final String FUNC_FAILEDMESSAGESENDER = "failedMessageSender";

    public static final String FUNC_SUBMITSIGNATURE = "submitSignature";

    public static final String FUNC_MESSAGEID = "messageId";

    public static final String FUNC_NUMAFFIRMATIONSSIGNED = "numAffirmationsSigned";

    public static final String FUNC_AFFIRMATIONSSIGNED = "affirmationsSigned";

    public static final String FUNC_SETMAXGASPERTX = "setMaxGasPerTx";

    public static final String FUNC_REQUIREDSIGNATURES = "requiredSignatures";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_MESSAGESSIGNED = "messagesSigned";

    public static final String FUNC_REQUIRETOCONFIRMMESSAGE = "requireToConfirmMessage";

    public static final String FUNC_VALIDATORCONTRACT = "validatorContract";

    public static final String FUNC_DEPLOYEDATBLOCK = "deployedAtBlock";

    public static final String FUNC_GETBRIDGEINTERFACESVERSION = "getBridgeInterfacesVersion";

    public static final String FUNC_MESSAGESOURCECHAINID = "messageSourceChainId";

    public static final String FUNC_SETREQUIREDBLOCKCONFIRMATIONS = "setRequiredBlockConfirmations";

    public static final String FUNC_DESTINATIONCHAINID = "destinationChainId";

    public static final String FUNC_SETGASPRICE = "setGasPrice";

    public static final String FUNC_MESSAGECALLSTATUS = "messageCallStatus";

    public static final String FUNC_MESSAGESENDER = "messageSender";

    public static final String FUNC_DECIMALSHIFT = "decimalShift";

    public static final String FUNC_REQUIRETOPASSMESSAGE = "requireToPassMessage";

    public static final String FUNC_FAILEDMESSAGEDATAHASH = "failedMessageDataHash";

    public static final String FUNC_MAXGASPERTX = "maxGasPerTx";

    public static final String FUNC_EXECUTEAFFIRMATION = "executeAffirmation";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GASPRICE = "gasPrice";

    public static final String FUNC_ISALREADYPROCESSED = "isAlreadyProcessed";

    public static final Event USERREQUESTFORSIGNATURE_EVENT = new Event("UserRequestForSignature", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event AFFIRMATIONCOMPLETED_EVENT = new Event("AffirmationCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SIGNEDFORUSERREQUEST_EVENT = new Event("SignedForUserRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SIGNEDFORAFFIRMATION_EVENT = new Event("SignedForAffirmation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event COLLECTEDSIGNATURES_EVENT = new Event("CollectedSignatures", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GASPRICECHANGED_EVENT = new Event("GasPriceChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT = new Event("RequiredBlockConfirmationChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected HomeAMB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HomeAMB(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HomeAMB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HomeAMB(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Bytes32> transactionHash() {
        final Function function = new Function(FUNC_TRANSACTIONHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> numMessagesSigned(Bytes32 _message) {
        final Function function = new Function(FUNC_NUMMESSAGESSIGNED, 
                Arrays.<Type>asList(_message), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> sourceChainId() {
        final Function function = new Function(FUNC_SOURCECHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _sendMessage(Address _contract, DynamicBytes _data, Uint256 _gas, Uint256 _dataType) {
        final Function function = new Function(
                FUNC__SENDMESSAGE, 
                Arrays.<Type>asList(_contract, _data, _gas, _dataType), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicBytes> signature(Bytes32 _hash, Uint256 _index) {
        final Function function = new Function(FUNC_SIGNATURE, 
                Arrays.<Type>asList(_hash, _index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Uint256 _sourceChainId, Uint256 _destinationChainId, Address _validatorContract, Uint256 _maxGasPerTx, Uint256 _gasPrice, Uint256 _requiredBlockConfirmations, Address _owner) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_sourceChainId, _destinationChainId, _validatorContract, _maxGasPerTx, _gasPrice, _requiredBlockConfirmations, _owner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isInitialized() {
        final Function function = new Function(FUNC_ISINITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> requiredBlockConfirmations() {
        final Function function = new Function(FUNC_REQUIREDBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getMinimumGasUsage(DynamicBytes _data) {
        final Function function = new Function(FUNC_GETMINIMUMGASUSAGE, 
                Arrays.<Type>asList(_data), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> failedMessageReceiver(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGERECEIVER, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes4> getBridgeMode() {
        final Function function = new Function(FUNC_GETBRIDGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChainIds(Uint256 _sourceChainId, Uint256 _destinationChainId) {
        final Function function = new Function(
                FUNC_SETCHAINIDS, 
                Arrays.<Type>asList(_sourceChainId, _destinationChainId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicBytes> message(Bytes32 _hash) {
        final Function function = new Function(FUNC_MESSAGE, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> failedMessageSender(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGESENDER, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSignature(DynamicBytes signature, DynamicBytes message) {
        final Function function = new Function(
                FUNC_SUBMITSIGNATURE, 
                Arrays.<Type>asList(signature, message), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> messageId() {
        final Function function = new Function(FUNC_MESSAGEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> numAffirmationsSigned(Bytes32 _hash) {
        final Function function = new Function(FUNC_NUMAFFIRMATIONSSIGNED, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> affirmationsSigned(Bytes32 _hash) {
        final Function function = new Function(FUNC_AFFIRMATIONSSIGNED, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxGasPerTx(Uint256 _maxGasPerTx) {
        final Function function = new Function(
                FUNC_SETMAXGASPERTX, 
                Arrays.<Type>asList(_maxGasPerTx), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> requiredSignatures() {
        final Function function = new Function(FUNC_REQUIREDSIGNATURES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> messagesSigned(Bytes32 _message) {
        final Function function = new Function(FUNC_MESSAGESSIGNED, 
                Arrays.<Type>asList(_message), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requireToConfirmMessage(Address _contract, DynamicBytes _data, Uint256 _gas) {
        final Function function = new Function(
                FUNC_REQUIRETOCONFIRMMESSAGE, 
                Arrays.<Type>asList(_contract, _data, _gas), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> validatorContract() {
        final Function function = new Function(FUNC_VALIDATORCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> deployedAtBlock() {
        final Function function = new Function(FUNC_DEPLOYEDATBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple3<Uint64, Uint64, Uint64>> getBridgeInterfacesVersion() {
        final Function function = new Function(FUNC_GETBRIDGEINTERFACESVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple3<Uint64, Uint64, Uint64>>(function,
                new Callable<Tuple3<Uint64, Uint64, Uint64>>() {
                    @Override
                    public Tuple3<Uint64, Uint64, Uint64> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Uint64, Uint64, Uint64>(
                                (Uint64) results.get(0), 
                                (Uint64) results.get(1), 
                                (Uint64) results.get(2));
                    }
                });
    }

    public RemoteFunctionCall<Uint256> messageSourceChainId() {
        final Function function = new Function(FUNC_MESSAGESOURCECHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequiredBlockConfirmations(Uint256 _blockConfirmations) {
        final Function function = new Function(
                FUNC_SETREQUIREDBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(_blockConfirmations), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> destinationChainId() {
        final Function function = new Function(FUNC_DESTINATIONCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGasPrice(Uint256 _gasPrice) {
        final Function function = new Function(
                FUNC_SETGASPRICE, 
                Arrays.<Type>asList(_gasPrice), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> messageCallStatus(Bytes32 _messageId) {
        final Function function = new Function(FUNC_MESSAGECALLSTATUS, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> messageSender() {
        final Function function = new Function(FUNC_MESSAGESENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Int256> decimalShift() {
        final Function function = new Function(FUNC_DECIMALSHIFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requireToPassMessage(Address _contract, DynamicBytes _data, Uint256 _gas) {
        final Function function = new Function(
                FUNC_REQUIRETOPASSMESSAGE, 
                Arrays.<Type>asList(_contract, _data, _gas), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> failedMessageDataHash(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGEDATAHASH, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> maxGasPerTx() {
        final Function function = new Function(FUNC_MAXGASPERTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> executeAffirmation(DynamicBytes message) {
        final Function function = new Function(
                FUNC_EXECUTEAFFIRMATION, 
                Arrays.<Type>asList(message), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> gasPrice() {
        final Function function = new Function(FUNC_GASPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isAlreadyProcessed(Uint256 _number) {
        final Function function = new Function(FUNC_ISALREADYPROCESSED, 
                Arrays.<Type>asList(_number), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<UserRequestForSignatureEventResponse> getUserRequestForSignatureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREQUESTFORSIGNATURE_EVENT, transactionReceipt);
        ArrayList<UserRequestForSignatureEventResponse> responses = new ArrayList<UserRequestForSignatureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRequestForSignatureEventResponse typedResponse = new UserRequestForSignatureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.encodedData = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserRequestForSignatureEventResponse> userRequestForSignatureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UserRequestForSignatureEventResponse>() {
            @Override
            public UserRequestForSignatureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERREQUESTFORSIGNATURE_EVENT, log);
                UserRequestForSignatureEventResponse typedResponse = new UserRequestForSignatureEventResponse();
                typedResponse.log = log;
                typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.encodedData = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UserRequestForSignatureEventResponse> userRequestForSignatureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERREQUESTFORSIGNATURE_EVENT));
        return userRequestForSignatureEventFlowable(filter);
    }

    public List<AffirmationCompletedEventResponse> getAffirmationCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AFFIRMATIONCOMPLETED_EVENT, transactionReceipt);
        ArrayList<AffirmationCompletedEventResponse> responses = new ArrayList<AffirmationCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AffirmationCompletedEventResponse typedResponse = new AffirmationCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.executor = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(2);
            typedResponse.status = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AffirmationCompletedEventResponse> affirmationCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AffirmationCompletedEventResponse>() {
            @Override
            public AffirmationCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AFFIRMATIONCOMPLETED_EVENT, log);
                AffirmationCompletedEventResponse typedResponse = new AffirmationCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.executor = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(2);
                typedResponse.status = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AffirmationCompletedEventResponse> affirmationCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AFFIRMATIONCOMPLETED_EVENT));
        return affirmationCompletedEventFlowable(filter);
    }

    public List<SignedForUserRequestEventResponse> getSignedForUserRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDFORUSERREQUEST_EVENT, transactionReceipt);
        ArrayList<SignedForUserRequestEventResponse> responses = new ArrayList<SignedForUserRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedForUserRequestEventResponse typedResponse = new SignedForUserRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedForUserRequestEventResponse> signedForUserRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedForUserRequestEventResponse>() {
            @Override
            public SignedForUserRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDFORUSERREQUEST_EVENT, log);
                SignedForUserRequestEventResponse typedResponse = new SignedForUserRequestEventResponse();
                typedResponse.log = log;
                typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<SignedForUserRequestEventResponse> signedForUserRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDFORUSERREQUEST_EVENT));
        return signedForUserRequestEventFlowable(filter);
    }

    public List<SignedForAffirmationEventResponse> getSignedForAffirmationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDFORAFFIRMATION_EVENT, transactionReceipt);
        ArrayList<SignedForAffirmationEventResponse> responses = new ArrayList<SignedForAffirmationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedForAffirmationEventResponse typedResponse = new SignedForAffirmationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedForAffirmationEventResponse> signedForAffirmationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedForAffirmationEventResponse>() {
            @Override
            public SignedForAffirmationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDFORAFFIRMATION_EVENT, log);
                SignedForAffirmationEventResponse typedResponse = new SignedForAffirmationEventResponse();
                typedResponse.log = log;
                typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<SignedForAffirmationEventResponse> signedForAffirmationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDFORAFFIRMATION_EVENT));
        return signedForAffirmationEventFlowable(filter);
    }

    public List<CollectedSignaturesEventResponse> getCollectedSignaturesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(COLLECTEDSIGNATURES_EVENT, transactionReceipt);
        ArrayList<CollectedSignaturesEventResponse> responses = new ArrayList<CollectedSignaturesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CollectedSignaturesEventResponse typedResponse = new CollectedSignaturesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authorityResponsibleForRelay = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.NumberOfCollectedSignatures = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CollectedSignaturesEventResponse> collectedSignaturesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CollectedSignaturesEventResponse>() {
            @Override
            public CollectedSignaturesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(COLLECTEDSIGNATURES_EVENT, log);
                CollectedSignaturesEventResponse typedResponse = new CollectedSignaturesEventResponse();
                typedResponse.log = log;
                typedResponse.authorityResponsibleForRelay = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.NumberOfCollectedSignatures = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<CollectedSignaturesEventResponse> collectedSignaturesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COLLECTEDSIGNATURES_EVENT));
        return collectedSignaturesEventFlowable(filter);
    }

    public List<GasPriceChangedEventResponse> getGasPriceChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GASPRICECHANGED_EVENT, transactionReceipt);
        ArrayList<GasPriceChangedEventResponse> responses = new ArrayList<GasPriceChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GasPriceChangedEventResponse typedResponse = new GasPriceChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gasPrice = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GasPriceChangedEventResponse> gasPriceChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GasPriceChangedEventResponse>() {
            @Override
            public GasPriceChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GASPRICECHANGED_EVENT, log);
                GasPriceChangedEventResponse typedResponse = new GasPriceChangedEventResponse();
                typedResponse.log = log;
                typedResponse.gasPrice = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<GasPriceChangedEventResponse> gasPriceChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GASPRICECHANGED_EVENT));
        return gasPriceChangedEventFlowable(filter);
    }

    public List<RequiredBlockConfirmationChangedEventResponse> getRequiredBlockConfirmationChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT, transactionReceipt);
        ArrayList<RequiredBlockConfirmationChangedEventResponse> responses = new ArrayList<RequiredBlockConfirmationChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequiredBlockConfirmationChangedEventResponse typedResponse = new RequiredBlockConfirmationChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requiredBlockConfirmations = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequiredBlockConfirmationChangedEventResponse> requiredBlockConfirmationChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RequiredBlockConfirmationChangedEventResponse>() {
            @Override
            public RequiredBlockConfirmationChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT, log);
                RequiredBlockConfirmationChangedEventResponse typedResponse = new RequiredBlockConfirmationChangedEventResponse();
                typedResponse.log = log;
                typedResponse.requiredBlockConfirmations = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RequiredBlockConfirmationChangedEventResponse> requiredBlockConfirmationChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT));
        return requiredBlockConfirmationChangedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static HomeAMB load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HomeAMB(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HomeAMB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HomeAMB(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HomeAMB load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HomeAMB(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HomeAMB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HomeAMB(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HomeAMB> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HomeAMB.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HomeAMB> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HomeAMB.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<HomeAMB> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HomeAMB.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HomeAMB> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HomeAMB.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UserRequestForSignatureEventResponse extends BaseEventResponse {
        public Bytes32 messageId;

        public DynamicBytes encodedData;
    }

    public static class AffirmationCompletedEventResponse extends BaseEventResponse {
        public Address sender;

        public Address executor;

        public Bytes32 messageId;

        public Bool status;
    }

    public static class SignedForUserRequestEventResponse extends BaseEventResponse {
        public Address signer;

        public Bytes32 messageHash;
    }

    public static class SignedForAffirmationEventResponse extends BaseEventResponse {
        public Address signer;

        public Bytes32 messageHash;
    }

    public static class CollectedSignaturesEventResponse extends BaseEventResponse {
        public Address authorityResponsibleForRelay;

        public Bytes32 messageHash;

        public Uint256 NumberOfCollectedSignatures;
    }

    public static class GasPriceChangedEventResponse extends BaseEventResponse {
        public Uint256 gasPrice;
    }

    public static class RequiredBlockConfirmationChangedEventResponse extends BaseEventResponse {
        public Uint256 requiredBlockConfirmations;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }
}
