<ruleset xmlns="http://codenarc.org/ruleset/1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
	xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

	<description>
		Rules for Groovy tests.
	</description>

	<!-- Basic rule set -->
	<rule class='org.codenarc.rule.basic.AssertWithinFinallyBlockRule'/>
	<rule class='org.codenarc.rule.basic.AssignmentInConditionalRule'/>
	<rule class='org.codenarc.rule.basic.BigDecimalInstantiationRule'/>
	<rule class='org.codenarc.rule.basic.BitwiseOperatorInConditionalRule'/>
	<rule class='org.codenarc.rule.basic.BooleanGetBooleanRule'/>
	<rule class='org.codenarc.rule.basic.BrokenNullCheckRule'/>
	<rule class='org.codenarc.rule.basic.BrokenOddnessCheckRule'/>
	<rule class='org.codenarc.rule.basic.ClassForNameRule'/>
	<rule class='org.codenarc.rule.basic.ComparisonOfTwoConstantsRule'/>
	<rule class='org.codenarc.rule.basic.ComparisonWithSelfRule'/>
	<rule class='org.codenarc.rule.basic.ConstantAssertExpressionRule'/>
	<rule class='org.codenarc.rule.basic.ConstantTernaryExpressionRule'/>
	<rule class='org.codenarc.rule.basic.ConstantIfExpressionRule'/>
	<rule class='org.codenarc.rule.basic.DeadCodeRule'/>
	<rule class='org.codenarc.rule.basic.DoubleNegativeRule'/>
	<rule class='org.codenarc.rule.basic.DuplicateCaseStatementRule'/>
	<rule class='org.codenarc.rule.basic.DuplicateMapKeyRule'/>
	<rule class='org.codenarc.rule.basic.DuplicateSetValueRule'/>
	<rule class='org.codenarc.rule.basic.EmptyCatchBlockRule'/>
	<rule class='org.codenarc.rule.basic.EmptyClassRule'/>
	<rule class='org.codenarc.rule.basic.EmptyElseBlockRule'/>
	<rule class='org.codenarc.rule.basic.EmptyFinallyBlockRule'/>
	<rule class='org.codenarc.rule.basic.EmptyForStatementRule'/>
	<rule class='org.codenarc.rule.basic.EmptyIfStatementRule'/>
	<rule class='org.codenarc.rule.basic.EmptySwitchStatementRule'/>
	<rule class='org.codenarc.rule.basic.EmptySynchronizedStatementRule'/>
	<rule class='org.codenarc.rule.basic.EmptyStaticInitializerRule'/>
	<rule class='org.codenarc.rule.basic.EmptyTryBlockRule'/>
	<rule class='org.codenarc.rule.basic.EmptyWhileStatementRule'/>
	<rule class='org.codenarc.rule.basic.EmptyInstanceInitializerRule'/>
	<rule class='org.codenarc.rule.basic.EmptyMethodRule'/>
	<rule class='org.codenarc.rule.basic.EqualsAndHashCodeRule'/>
	<rule class='org.codenarc.rule.basic.EqualsOverloadedRule'/>
	<rule class='org.codenarc.rule.basic.ExplicitGarbageCollectionRule'/>
	<!--rule class='org.codenarc.rule.basic.ForLoopShouldBeWhileLoopRule'/-->
	<rule class='org.codenarc.rule.basic.HardCodedWindowsFileSeparatorRule'/>
	<rule class='org.codenarc.rule.basic.HardCodedWindowsRootDirectoryRule'/>
	<rule class='org.codenarc.rule.basic.IntegerGetIntegerRule'/>
	<rule class='org.codenarc.rule.basic.MultipleUnaryOperatorsRule'/>
	<rule class='org.codenarc.rule.basic.RandomDoubleCoercedToZeroRule'/>
	<rule class='org.codenarc.rule.basic.RemoveAllOnSelfRule'/>
	<rule class='org.codenarc.rule.basic.ReturnFromFinallyBlockRule'/>
	<rule class='org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRule'/>

	<!-- Unused rule set -->
	<rule class='org.codenarc.rule.unused.UnusedArrayRule'/>
	<rule class='org.codenarc.rule.unused.UnusedObjectRule'/>
	<rule class='org.codenarc.rule.unused.UnusedPrivateFieldRule'/>
	<rule class='org.codenarc.rule.unused.UnusedPrivateMethodParameterRule'/>
	<rule class='org.codenarc.rule.unused.UnusedPrivateMethodRule'/>
	<rule class='org.codenarc.rule.unused.UnusedVariableRule'/>
	<!--rule class='org.codenarc.rule.unused.UnusedMethodParameterRule'/-->

	<!-- Unnecessary rule set -->
	<rule class='org.codenarc.rule.unnecessary.AddEmptyStringRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.ConsecutiveStringConcatenationRule'/-->
	<rule class='org.codenarc.rule.unnecessary.ConsecutiveLiteralAppendsRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryBigDecimalInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryBigIntegerInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryBooleanExpressionRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryBooleanInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCallForLastElementRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCallToSubstringRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCastRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCatchBlockRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCollectCallRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryCollectionCallRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryConstructorRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryDefInVariableDeclarationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryDotClassRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryDoubleInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryElseStatementRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryFinalOnPrivateMethodRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryFloatInstantiationRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryGetterRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryGStringRule'/-->
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryIfStatementRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryInstanceOfCheckRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryInstantiationToGetClassRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryIntegerInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryLongInstantiationRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryModOneRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryNullCheckBeforeInstanceOfRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryNullCheckRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryObjectReferencesRule'/-->
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryOverridingMethodRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryPackageReferenceRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryParenthesesForMethodCallWithClosureRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryPublicModifierRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryReturnKeywordRule'/-->
	<rule class='org.codenarc.rule.unnecessary.UnnecessarySafeNavigationOperatorRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessarySelfAssignmentRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessarySemicolonRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessarySetterRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryStringInstantiationRule'/-->
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessarySubstringRule'/-->
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryTernaryExpressionRule'/>
	<rule class='org.codenarc.rule.unnecessary.UnnecessaryToStringRule'/>
	<!--rule class='org.codenarc.rule.unnecessary.UnnecessaryTransientModifierRule'/-->

	<!-- Size and complexity rule set -->
	<!--rule class='org.codenarc.rule.size.AbcMetricRule'/-->
	<rule class='org.codenarc.rule.size.ClassSizeRule'/>
	<rule class='org.codenarc.rule.size.CrapMetricRule'/>
	<rule class='org.codenarc.rule.size.CyclomaticComplexityRule'/>
	<!--rule class='org.codenarc.rule.size.MethodCountRule'/-->
	<!--rule class='org.codenarc.rule.size.MethodSizeRule'/-->
	<rule class='org.codenarc.rule.size.NestedBlockDepthRule'/>
	<rule class='org.codenarc.rule.size.ParameterCountRule'/>
</ruleset>
