package com.streamr.client.dataunion.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray6;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class DataUnionSidechain extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600080546001600160a01b0319169055612989806100306000396000f3fe6080604052600436106102605760003560e01c806371cdfd6811610144578063bf1e42c0116100b6578063ce7b78641161007a578063ce7b786414610d5e578063e30c397814610e31578063e6018c3114610e46578063ead5d35914610e70578063f2fde38b14610eb1578063fc0c546a14610ee457610267565b8063bf1e42c014610c5d578063c44b73a314610c72578063c59d484714610cc9578063ca6d56dc14610d16578063cc77244014610d4957610267565b80638da5cb5b116101085780638da5cb5b146109d35780639107d08e14610a04578063a2d3cf4b14610a70578063a4d6ddc014610b41578063ae66d94814610bf1578063b274bcc714610c2457610267565b806371cdfd681461088157806373e2290c146108ba57806379049017146108fb5780637b30ed431461091057806385a21246146109be57610267565b8063392e53cd116101dd5780634e71e0c8116101a15780634e71e0c8146106b9578063593b79fe146106ce5780635fb6c6ed14610776578063662d45a21461078b5780636d8018b8146107be5780636f4d469b146107d357610267565b8063392e53cd146105f85780633d8e36a3146106215780633ebff90e146106365780634bee91371461064b5780634e40ea641461068657610267565b80631a79246c116102245780631a79246c146104885780632b94411f146105605780632df3eba41461059b5780632e0d4212146105b0578063331beb5f146105e357610267565b8063015c7f511461026c5780630600a8651461034d57806309a6400b14610374578063131b9c04146103a75780631796621a146103da57610267565b3661026757005b600080fd5b34801561027857600080fd5b5061034b600480360360c081101561028f57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156102c257600080fd5b8201836020820111156102d457600080fd5b803590602001918460208302840111600160201b831117156102f557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383358116945060208401351692604001359150610ef99050565b005b34801561035957600080fd5b50610362610fe6565b60408051918252519081900360200190f35b34801561038057600080fd5b5061034b6004803603602081101561039757600080fd5b50356001600160a01b0316611005565b3480156103b357600080fd5b50610362600480360360208110156103ca57600080fd5b50356001600160a01b0316611125565b3480156103e657600080fd5b5061034b600480360360208110156103fd57600080fd5b810190602081018135600160201b81111561041757600080fd5b82018360208201111561042957600080fd5b803590602001918460208302840111600160201b8311171561044a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111d5945050505050565b34801561049457600080fd5b50610362600480360360a08110156104ab57600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b8111156104ec57600080fd5b8201836020820111156104fe57600080fd5b803590602001918460018302840111600160201b8311171561051f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611254945050505050565b34801561056c57600080fd5b506103626004803603604081101561058357600080fd5b506001600160a01b03813516906020013515156112be565b3480156105a757600080fd5b506103626112da565b3480156105bc57600080fd5b50610362600480360360208110156105d357600080fd5b50356001600160a01b03166112e0565b3480156105ef57600080fd5b50610362611309565b34801561060457600080fd5b5061060d61147e565b604080519115158252519081900360200190f35b34801561062d57600080fd5b5061036261148f565b34801561064257600080fd5b50610362611495565b34801561065757600080fd5b506103626004803603604081101561066e57600080fd5b506001600160a01b038135169060200135151561149b565b34801561069257600080fd5b5061034b600480360360208110156106a957600080fd5b50356001600160a01b03166114b0565b3480156106c557600080fd5b5061034b611619565b3480156106da57600080fd5b50610701600480360360208110156106f157600080fd5b50356001600160a01b03166116cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561073b578181015183820152602001610723565b50505050905090810190601f1680156107685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078257600080fd5b506103626116f3565b34801561079757600080fd5b5061034b600480360360208110156107ae57600080fd5b50356001600160a01b03166116f9565b3480156107ca57600080fd5b5061036261181d565b3480156107df57600080fd5b5061034b600480360360208110156107f657600080fd5b810190602081018135600160201b81111561081057600080fd5b82018360208201111561082257600080fd5b803590602001918460208302840111600160201b8311171561084357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611823945050505050565b34801561088d57600080fd5b5061034b600480360360408110156108a457600080fd5b506001600160a01b0381351690602001356118bf565b3480156108c657600080fd5b50610362600480360360608110156108dd57600080fd5b506001600160a01b0381351690602081013590604001351515611990565b34801561090757600080fd5b506103626119a6565b34801561091c57600080fd5b5061034b6004803603602081101561093357600080fd5b810190602081018135600160201b81111561094d57600080fd5b82018360208201111561095f57600080fd5b803590602001918460208302840111600160201b8311171561098057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119ac945050505050565b3480156109ca57600080fd5b506103626119dc565b3480156109df57600080fd5b506109e86119e2565b604080516001600160a01b039092168252519081900360200190f35b348015610a1057600080fd5b50610a3760048036036020811015610a2757600080fd5b50356001600160a01b03166119f1565b60405180856002811115610a4757fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610a7c57600080fd5b5061060d60048036036080811015610a9357600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610acd57600080fd5b820183602082011115610adf57600080fd5b803590602001918460018302840111600160201b83111715610b0057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a1c945050505050565b348015610b4d57600080fd5b5061036260048036036040811015610b6457600080fd5b810190602081018135600160201b811115610b7e57600080fd5b820183602082011115610b9057600080fd5b803590602001918460208302840111600160201b83111715610bb157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050611c1d565b348015610bfd57600080fd5b5061036260048036036020811015610c1457600080fd5b50356001600160a01b0316611c6a565b348015610c3057600080fd5b5061034b60048036036040811015610c4757600080fd5b506001600160a01b038135169060200135611ce2565b348015610c6957600080fd5b506109e8611f58565b348015610c7e57600080fd5b50610ca560048036036020811015610c9557600080fd5b50356001600160a01b0316611f67565b60405180826002811115610cb557fe5b60ff16815260200191505060405180910390f35b348015610cd557600080fd5b50610cde611f7c565b604051808260c080838360005b83811015610d03578181015183820152602001610ceb565b5050505090500191505060405180910390f35b348015610d2257600080fd5b5061034b60048036036020811015610d3957600080fd5b50356001600160a01b0316611fc2565b348015610d5557600080fd5b506109e86121c8565b348015610d6a57600080fd5b5061036260048036036080811015610d8157600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610dbd57600080fd5b820183602082011115610dcf57600080fd5b803590602001918460018302840111600160201b83111715610df057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506121d7945050505050565b348015610e3d57600080fd5b506109e8612249565b348015610e5257600080fd5b5061034b60048036036020811015610e6957600080fd5b5035612258565b348015610e7c57600080fd5b5061036260048036036060811015610e9357600080fd5b506001600160a01b03813516906020810135906040013515156122ee565b348015610ebd57600080fd5b5061034b60048036036020811015610ed457600080fd5b50356001600160a01b0316612363565b348015610ef057600080fd5b506109e86123d0565b610f0161147e565b15610f53576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c7265616479496e697469616c697a65640000000000000000604482015290519081900360640190fd5b60008054336001600160a01b031991821617909155600280549091166001600160a01b038716179055610f85846111d5565b600380546001600160a01b038086166001600160a01b0319928316179092556004805492851692909116919091179055610fbe81612258565b5050600080546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000610fff6006546005546123df90919063ffffffff16565b90505b90565b6000546001600160a01b03163314611050576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561107957fe5b146110c2576040805162461bcd60e51b8152602060048201526014602482015273195c9c9bdc97db9bdd1058dd1a5d995059d95b9d60621b604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a2600a5461111f90600163ffffffff6123df16565b600a5550565b6001600160a01b0381166000908152600c6020526040812081815460ff16600281111561114e57fe5b1415611193576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6001815460ff1660028111156111a557fe5b146111b15760006111c8565b60028101546009546111c89163ffffffff6123df16565b6001909101540192915050565b6000546001600160a01b03163314611220576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b81518110156112505761124882828151811061123b57fe5b60200260200101516116f9565b600101611223565b5050565b600061126286868685611a1c565b6112a8576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b6112b486868686612421565b9695505050505050565b60006112d3836112cd336112e0565b84611990565b9392505050565b60055481565b60006113036112ee83611c6a565b6112f784611125565b9063ffffffff6123df16565b92915050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b5051905060006113a1611394610fe6565b839063ffffffff6123df16565b90508015806113b05750600754155b156113c057600092505050611002565b60006113d76007548361273290919063ffffffff16565b6009549091506113ed908263ffffffff61277416565b600955600554611403908363ffffffff61277416565b6005556040805183815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a160075460408051838152602081019290925280517f24a9873073eba764d17ef9fa7475b3b209c02e6e6f7ed991c9c80e09226a37a79281900390910190a15091505090565b6002546001600160a01b0316151590565b60085481565b600a5481565b60006112d3836114aa856112e0565b846122ee565b336001600160a01b03821614806114e457506001336000908152600d602052604090205460ff1660028111156114e257fe5b145b61152a576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561155457fe5b1461159e576040805162461bcd60e51b815260206004820152601560248201527432b93937b92fb737ba20b1ba34bb32a6b2b6b132b960591b604482015290519081900360640190fd5b6115a782611125565b600182810191909155815460ff191660021782556007546115c7916123df565b6007556008546115de90600163ffffffff61277416565b6008556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b0316331461166b576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60075481565b6000546001600160a01b03163314611744576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561176d57fe5b14156117c0576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c72656164794163746976654167656e740000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a2600a5461111f90600163ffffffff61277416565b60095481565b6001336000908152600d602052604090205460ff16600281111561184357fe5b1461188f576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b60005b8151811015611250576118b78282815181106118aa57fe5b6020026020010151611fc2565b600101611892565b806118c9336112e0565b1015611918576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b336000908152600c60205260409020600381015461193c908363ffffffff61277416565b600382015561194b83836127ce565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b600061199e33858585612421565b949350505050565b600b5481565b60005b8151811015611250576119d48282815181106119c757fe5b60200260200101516114b0565b6001016119af565b60065481565b6000546001600160a01b031681565b600c60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60008151604114611a74576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b811015611a9357601b015b8060ff16601b1480611aa857508060ff16601c145b611af9576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b6000878730611b078c611c6a565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611bf5573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c81169116149650505050505050949350505050565b600080805b8451811015611c6257611c58611c4b868381518110611c3d57fe5b60200260200101518661149b565b839063ffffffff61277416565b9150600101611c22565b509392505050565b6001600160a01b0381166000908152600c6020526040812081815460ff166002811115611c9357fe5b1415611cd8576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6003015492915050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d6020811015611d5757600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015611db657600080fd5b505af1158015611dca573d6000803e3d6000fd5b505050506040513d6020811015611de057600080fd5b5051611e24576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e6f57600080fd5b505afa158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b5051905082611eae828463ffffffff6123df16565b1015611ef2576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b611efc84846127ce565b600554611f0f908463ffffffff61277416565b6005556040805184815290516001600160a01b0386169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a350505050565b6004546001600160a01b031681565b600d6020526000908152604090205460ff1681565b611f84612935565b6040518060c0016040528060055481526020016006548152602001600754815260200160085481526020016009548152602001600a54815250905090565b6001336000908152600d602052604090205460ff166002811115611fe257fe5b1461202e576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561205857fe5b14156120a1576040805162461bcd60e51b815260206004820152601360248201527232b93937b92fb0b63932b0b23ca6b2b6b132b960691b604482015290519081900360640190fd5b6002815460ff1660028111156120b357fe5b14156120d1576008546120cd90600163ffffffff6123df16565b6008555b600080825460ff1660028111156120e457fe5b1480156120f25750600b5415155b80156121005750600b544710155b825460ff19166001908117845560095460028501556007549192506121259190612774565b6007556040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a280156121c357600b546040516001600160a01b0385169180156108fc02916000818181858888f19350505050156121c357600b5460408051918252517f55e2724f03f2711a94cf86d8b10c57130b103d6c2f1726076fbf9430340d41e79181900360200190a15b505050565b6003546001600160a01b031681565b60006121e68585600085611a1c565b61222c576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b612240858561223a886112e0565b86612421565b95945050505050565b6001546001600160a01b031681565b6000546001600160a01b031633146122a3576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600b548114156122b2576122eb565b600b8190556040805182815290517f749d0aa4ca45d6142166deb1820b64a888996311bb9f74a88c081f5b041d949c9181900360200190a15b50565b6000336001600160a01b038516148061231157506000546001600160a01b031633145b612357576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b61199e84858585612421565b6000546001600160a01b031633146123ae576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006112d383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612839565b6000826124305750600061199e565b612439856112e0565b831115612489576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b6001600160a01b0385166000908152600c6020526040902060038101546124b6908563ffffffff61277416565b60038201556006546124ce908563ffffffff61277416565b6006558215612625576002546003546001600160a01b0391821691634000aea09116866124fa896116cf565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561256457818101518382015260200161254c565b50505050905090810190601f1680156125915780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156125b257600080fd5b505af11580156125c6573d6000803e3d6000fd5b505050506040513d60208110156125dc57600080fd5b5051612620576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6126e9565b6002546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561267b57600080fd5b505af115801561268f573d6000803e3d6000fd5b505050506040513d60208110156126a557600080fd5b50516126e9576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b60006112d383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128d0565b6000828201838110156112d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060018101546127fb908363ffffffff61277416565b60018201556000815460ff16600281111561281257fe5b14156121c357805460ff19166002178155600854612831906001612774565b600855505050565b600081848411156128c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561288d578181015183820152602001612875565b50505050905090810190601f1680156128ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361291f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561288d578181015183820152602001612875565b50600083858161292b57fe5b0495945050505050565b6040518060c00160405280600690602082028036833750919291505056fea26469706673582212201bc1ebe49687dbeb26b9f260d089c5aa418b9a9ef5e8f22bf1ce619e57f6f06c64736f6c63430006060033";

    public static final String FUNC_ACTIVEMEMBERCOUNT = "activeMemberCount";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_DATAUNIONMAINNET = "dataUnionMainnet";

    public static final String FUNC_INACTIVEMEMBERCOUNT = "inactiveMemberCount";

    public static final String FUNC_JOINPARTAGENTCOUNT = "joinPartAgentCount";

    public static final String FUNC_JOINPARTAGENTS = "joinPartAgents";

    public static final String FUNC_LIFETIMEMEMBEREARNINGS = "lifetimeMemberEarnings";

    public static final String FUNC_MEMBERDATA = "memberData";

    public static final String FUNC_NEWMEMBERETH = "newMemberEth";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGOWNER = "pendingOwner";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_TOKENMEDIATOR = "tokenMediator";

    public static final String FUNC_TOTALEARNINGS = "totalEarnings";

    public static final String FUNC_TOTALEARNINGSWITHDRAWN = "totalEarningsWithdrawn";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISINITIALIZED = "isInitialized";

    public static final String FUNC_GETSTATS = "getStats";

    public static final String FUNC_SETNEWMEMBERETH = "setNewMemberEth";

    public static final String FUNC_GETEARNINGS = "getEarnings";

    public static final String FUNC_GETWITHDRAWN = "getWithdrawn";

    public static final String FUNC_GETWITHDRAWABLEEARNINGS = "getWithdrawableEarnings";

    public static final String FUNC_TOTALWITHDRAWABLE = "totalWithdrawable";

    public static final String FUNC_ADDJOINPARTAGENTS = "addJoinPartAgents";

    public static final String FUNC_ADDJOINPARTAGENT = "addJoinPartAgent";

    public static final String FUNC_REMOVEJOINPARTAGENT = "removeJoinPartAgent";

    public static final String FUNC_REFRESHREVENUE = "refreshRevenue";

    public static final String FUNC_ADDMEMBER = "addMember";

    public static final String FUNC_PARTMEMBER = "partMember";

    public static final String FUNC_ADDMEMBERS = "addMembers";

    public static final String FUNC_PARTMEMBERS = "partMembers";

    public static final String FUNC_TRANSFERTOMEMBERINCONTRACT = "transferToMemberInContract";

    public static final String FUNC_TRANSFERWITHINCONTRACT = "transferWithinContract";

    public static final String FUNC_WITHDRAWMEMBERS = "withdrawMembers";

    public static final String FUNC_WITHDRAWALL = "withdrawAll";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWALLTO = "withdrawAllTo";

    public static final String FUNC_WITHDRAWTO = "withdrawTo";

    public static final String FUNC_SIGNATUREISVALID = "signatureIsValid";

    public static final String FUNC_WITHDRAWALLTOSIGNED = "withdrawAllToSigned";

    public static final String FUNC_WITHDRAWTOSIGNED = "withdrawToSigned";

    public static final String FUNC_TOBYTES = "toBytes";

    public static final Event EARNINGSWITHDRAWN_EVENT = new Event("EarningsWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event JOINPARTAGENTADDED_EVENT = new Event("JoinPartAgentAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event JOINPARTAGENTREMOVED_EVENT = new Event("JoinPartAgentRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MEMBERJOINED_EVENT = new Event("MemberJoined", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MEMBERPARTED_EVENT = new Event("MemberParted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event NEWEARNINGS_EVENT = new Event("NewEarnings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWMEMBERETHSENT_EVENT = new Event("NewMemberEthSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVENUERECEIVED_EVENT = new Event("RevenueReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERTOADDRESSINCONTRACT_EVENT = new Event("TransferToAddressInContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERWITHINCONTRACT_EVENT = new Event("TransferWithinContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATENEWMEMBERETH_EVENT = new Event("UpdateNewMemberEth", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected DataUnionSidechain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DataUnionSidechain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DataUnionSidechain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DataUnionSidechain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<EarningsWithdrawnEventResponse> getEarningsWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EARNINGSWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<EarningsWithdrawnEventResponse> responses = new ArrayList<EarningsWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EarningsWithdrawnEventResponse typedResponse = new EarningsWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EarningsWithdrawnEventResponse> earningsWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EarningsWithdrawnEventResponse>() {
            @Override
            public EarningsWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EARNINGSWITHDRAWN_EVENT, log);
                EarningsWithdrawnEventResponse typedResponse = new EarningsWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<EarningsWithdrawnEventResponse> earningsWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EARNINGSWITHDRAWN_EVENT));
        return earningsWithdrawnEventFlowable(filter);
    }

    public List<JoinPartAgentAddedEventResponse> getJoinPartAgentAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINPARTAGENTADDED_EVENT, transactionReceipt);
        ArrayList<JoinPartAgentAddedEventResponse> responses = new ArrayList<JoinPartAgentAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JoinPartAgentAddedEventResponse typedResponse = new JoinPartAgentAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JoinPartAgentAddedEventResponse> joinPartAgentAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JoinPartAgentAddedEventResponse>() {
            @Override
            public JoinPartAgentAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINPARTAGENTADDED_EVENT, log);
                JoinPartAgentAddedEventResponse typedResponse = new JoinPartAgentAddedEventResponse();
                typedResponse.log = log;
                typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<JoinPartAgentAddedEventResponse> joinPartAgentAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINPARTAGENTADDED_EVENT));
        return joinPartAgentAddedEventFlowable(filter);
    }

    public List<JoinPartAgentRemovedEventResponse> getJoinPartAgentRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINPARTAGENTREMOVED_EVENT, transactionReceipt);
        ArrayList<JoinPartAgentRemovedEventResponse> responses = new ArrayList<JoinPartAgentRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JoinPartAgentRemovedEventResponse typedResponse = new JoinPartAgentRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JoinPartAgentRemovedEventResponse> joinPartAgentRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JoinPartAgentRemovedEventResponse>() {
            @Override
            public JoinPartAgentRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINPARTAGENTREMOVED_EVENT, log);
                JoinPartAgentRemovedEventResponse typedResponse = new JoinPartAgentRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<JoinPartAgentRemovedEventResponse> joinPartAgentRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINPARTAGENTREMOVED_EVENT));
        return joinPartAgentRemovedEventFlowable(filter);
    }

    public List<MemberJoinedEventResponse> getMemberJoinedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MEMBERJOINED_EVENT, transactionReceipt);
        ArrayList<MemberJoinedEventResponse> responses = new ArrayList<MemberJoinedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MemberJoinedEventResponse typedResponse = new MemberJoinedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MemberJoinedEventResponse> memberJoinedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MemberJoinedEventResponse>() {
            @Override
            public MemberJoinedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MEMBERJOINED_EVENT, log);
                MemberJoinedEventResponse typedResponse = new MemberJoinedEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MemberJoinedEventResponse> memberJoinedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MEMBERJOINED_EVENT));
        return memberJoinedEventFlowable(filter);
    }

    public List<MemberPartedEventResponse> getMemberPartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MEMBERPARTED_EVENT, transactionReceipt);
        ArrayList<MemberPartedEventResponse> responses = new ArrayList<MemberPartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MemberPartedEventResponse typedResponse = new MemberPartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MemberPartedEventResponse> memberPartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MemberPartedEventResponse>() {
            @Override
            public MemberPartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MEMBERPARTED_EVENT, log);
                MemberPartedEventResponse typedResponse = new MemberPartedEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MemberPartedEventResponse> memberPartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MEMBERPARTED_EVENT));
        return memberPartedEventFlowable(filter);
    }

    public List<NewEarningsEventResponse> getNewEarningsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWEARNINGS_EVENT, transactionReceipt);
        ArrayList<NewEarningsEventResponse> responses = new ArrayList<NewEarningsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewEarningsEventResponse typedResponse = new NewEarningsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.earningsPerMember = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.activeMemberCount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewEarningsEventResponse> newEarningsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewEarningsEventResponse>() {
            @Override
            public NewEarningsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWEARNINGS_EVENT, log);
                NewEarningsEventResponse typedResponse = new NewEarningsEventResponse();
                typedResponse.log = log;
                typedResponse.earningsPerMember = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.activeMemberCount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewEarningsEventResponse> newEarningsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWEARNINGS_EVENT));
        return newEarningsEventFlowable(filter);
    }

    public List<NewMemberEthSentEventResponse> getNewMemberEthSentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMEMBERETHSENT_EVENT, transactionReceipt);
        ArrayList<NewMemberEthSentEventResponse> responses = new ArrayList<NewMemberEthSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewMemberEthSentEventResponse typedResponse = new NewMemberEthSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amountWei = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewMemberEthSentEventResponse> newMemberEthSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewMemberEthSentEventResponse>() {
            @Override
            public NewMemberEthSentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMEMBERETHSENT_EVENT, log);
                NewMemberEthSentEventResponse typedResponse = new NewMemberEthSentEventResponse();
                typedResponse.log = log;
                typedResponse.amountWei = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewMemberEthSentEventResponse> newMemberEthSentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMEMBERETHSENT_EVENT));
        return newMemberEthSentEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RevenueReceivedEventResponse> getRevenueReceivedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REVENUERECEIVED_EVENT, transactionReceipt);
        ArrayList<RevenueReceivedEventResponse> responses = new ArrayList<RevenueReceivedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RevenueReceivedEventResponse typedResponse = new RevenueReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevenueReceivedEventResponse> revenueReceivedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RevenueReceivedEventResponse>() {
            @Override
            public RevenueReceivedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REVENUERECEIVED_EVENT, log);
                RevenueReceivedEventResponse typedResponse = new RevenueReceivedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RevenueReceivedEventResponse> revenueReceivedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVENUERECEIVED_EVENT));
        return revenueReceivedEventFlowable(filter);
    }

    public List<TransferToAddressInContractEventResponse> getTransferToAddressInContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERTOADDRESSINCONTRACT_EVENT, transactionReceipt);
        ArrayList<TransferToAddressInContractEventResponse> responses = new ArrayList<TransferToAddressInContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferToAddressInContractEventResponse typedResponse = new TransferToAddressInContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferToAddressInContractEventResponse> transferToAddressInContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferToAddressInContractEventResponse>() {
            @Override
            public TransferToAddressInContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERTOADDRESSINCONTRACT_EVENT, log);
                TransferToAddressInContractEventResponse typedResponse = new TransferToAddressInContractEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferToAddressInContractEventResponse> transferToAddressInContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERTOADDRESSINCONTRACT_EVENT));
        return transferToAddressInContractEventFlowable(filter);
    }

    public List<TransferWithinContractEventResponse> getTransferWithinContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERWITHINCONTRACT_EVENT, transactionReceipt);
        ArrayList<TransferWithinContractEventResponse> responses = new ArrayList<TransferWithinContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferWithinContractEventResponse typedResponse = new TransferWithinContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferWithinContractEventResponse> transferWithinContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferWithinContractEventResponse>() {
            @Override
            public TransferWithinContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERWITHINCONTRACT_EVENT, log);
                TransferWithinContractEventResponse typedResponse = new TransferWithinContractEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferWithinContractEventResponse> transferWithinContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERWITHINCONTRACT_EVENT));
        return transferWithinContractEventFlowable(filter);
    }

    public List<UpdateNewMemberEthEventResponse> getUpdateNewMemberEthEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATENEWMEMBERETH_EVENT, transactionReceipt);
        ArrayList<UpdateNewMemberEthEventResponse> responses = new ArrayList<UpdateNewMemberEthEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateNewMemberEthEventResponse typedResponse = new UpdateNewMemberEthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateNewMemberEthEventResponse> updateNewMemberEthEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateNewMemberEthEventResponse>() {
            @Override
            public UpdateNewMemberEthEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATENEWMEMBERETH_EVENT, log);
                UpdateNewMemberEthEventResponse typedResponse = new UpdateNewMemberEthEventResponse();
                typedResponse.log = log;
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateNewMemberEthEventResponse> updateNewMemberEthEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATENEWMEMBERETH_EVENT));
        return updateNewMemberEthEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> activeMemberCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVEMEMBERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIMOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> dataUnionMainnet() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DATAUNIONMAINNET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> inactiveMemberCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INACTIVEMEMBERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> joinPartAgentCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JOINPARTAGENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint8> joinPartAgents(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JOINPARTAGENTS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> lifetimeMemberEarnings() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIFETIMEMEMBEREARNINGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple4<Uint8, Uint256, Uint256, Uint256>> memberData(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MEMBERDATA, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Uint8, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple4<Uint8, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple4<Uint8, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Uint8, Uint256, Uint256, Uint256>(
                                (Uint8) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3));
                    }
                });
    }

    public RemoteFunctionCall<Uint256> newMemberEth() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NEWMEMBERETH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> pendingOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PENDINGOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> tokenMediator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENMEDIATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalEarnings() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALEARNINGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalEarningsWithdrawn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALEARNINGSWITHDRAWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Address initialOwner, Address tokenAddress, DynamicArray<Address> initialJoinPartAgents, Address tokenMediatorAddress, Address mainnetDataUnionAddress, Uint256 defaultNewMemberEth) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(initialOwner, tokenAddress, initialJoinPartAgents, tokenMediatorAddress, mainnetDataUnionAddress, defaultNewMemberEth), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isInitialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISINITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<StaticArray6<Uint256>> getStats() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray6<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNewMemberEth(Uint256 val) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNEWMEMBERETH, 
                Arrays.<Type>asList(val), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getEarnings(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEARNINGS, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getWithdrawn(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWITHDRAWN, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getWithdrawableEarnings(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWITHDRAWABLEEARNINGS, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalWithdrawable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALWITHDRAWABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addJoinPartAgents(DynamicArray<Address> agents) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDJOINPARTAGENTS, 
                Arrays.<Type>asList(agents), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addJoinPartAgent(Address agent) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDJOINPARTAGENT, 
                Arrays.<Type>asList(agent), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeJoinPartAgent(Address agent) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEJOINPARTAGENT, 
                Arrays.<Type>asList(agent), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refreshRevenue() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFRESHREVENUE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addMember(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMEMBER, 
                Arrays.<Type>asList(member), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> partMember(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PARTMEMBER, 
                Arrays.<Type>asList(member), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addMembers(DynamicArray<Address> members) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMEMBERS, 
                Arrays.<Type>asList(members), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> partMembers(DynamicArray<Address> members) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PARTMEMBERS, 
                Arrays.<Type>asList(members), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferToMemberInContract(Address recipient, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERTOMEMBERINCONTRACT, 
                Arrays.<Type>asList(recipient, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferWithinContract(Address recipient, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERWITHINCONTRACT, 
                Arrays.<Type>asList(recipient, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawMembers(DynamicArray<Address> members, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWMEMBERS, 
                Arrays.<Type>asList(members, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAll(Address member, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALL, 
                Arrays.<Type>asList(member, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(Address member, Uint256 amount, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(member, amount, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAllTo(Address to, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALLTO, 
                Arrays.<Type>asList(to, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawTo(Address to, Uint256 amount, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTO, 
                Arrays.<Type>asList(to, amount, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> signatureIsValid(Address signer, Address recipient, Uint256 amount, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SIGNATUREISVALID, 
                Arrays.<Type>asList(signer, recipient, amount, signature), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAllToSigned(Address fromSigner, Address to, Bool sendToMainnet, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALLTOSIGNED, 
                Arrays.<Type>asList(fromSigner, to, sendToMainnet, signature), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToSigned(Address fromSigner, Address to, Uint256 amount, Bool sendToMainnet, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTOSIGNED, 
                Arrays.<Type>asList(fromSigner, to, amount, sendToMainnet, signature), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicBytes> toBytes(Address a) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBYTES, 
                Arrays.<Type>asList(a), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static DataUnionSidechain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataUnionSidechain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DataUnionSidechain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataUnionSidechain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DataUnionSidechain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DataUnionSidechain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DataUnionSidechain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DataUnionSidechain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EarningsWithdrawnEventResponse extends BaseEventResponse {
        public Address member;

        public Uint256 amount;
    }

    public static class JoinPartAgentAddedEventResponse extends BaseEventResponse {
        public Address agent;
    }

    public static class JoinPartAgentRemovedEventResponse extends BaseEventResponse {
        public Address agent;
    }

    public static class MemberJoinedEventResponse extends BaseEventResponse {
        public Address member;
    }

    public static class MemberPartedEventResponse extends BaseEventResponse {
        public Address member;
    }

    public static class NewEarningsEventResponse extends BaseEventResponse {
        public Uint256 earningsPerMember;

        public Uint256 activeMemberCount;
    }

    public static class NewMemberEthSentEventResponse extends BaseEventResponse {
        public Uint256 amountWei;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class RevenueReceivedEventResponse extends BaseEventResponse {
        public Uint256 amount;
    }

    public static class TransferToAddressInContractEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 amount;
    }

    public static class TransferWithinContractEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 amount;
    }

    public static class UpdateNewMemberEthEventResponse extends BaseEventResponse {
        public Uint256 value;
    }
}
