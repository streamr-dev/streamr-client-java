package com.streamr.client.dataunion.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray6;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.4.
 */
@SuppressWarnings("rawtypes")
public class DataUnionSidechain extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600080546001600160a01b0319169055613344806100306000396000f3fe60806040526004361061028c5760003560e01c806373e2290c1161015a578063bf1e42c0116100c1578063db7af8541161007a578063db7af85414610f0d578063e30c397814610fd3578063e6018c3114610fe8578063ead5d35914611012578063f2fde38b14611053578063fc0c546a1461108657610293565b8063bf1e42c014610d39578063c44b73a314610d4e578063c59d484714610da5578063ca6d56dc14610df2578063cc77244014610e25578063ce7b786414610e3a57610293565b80639107d08e116101135780639107d08e14610a50578063a2d3cf4b14610abc578063a4c0ed3614610b8d578063a4d6ddc014610c1d578063ae66d94814610ccd578063b274bcc714610d0057610293565b806373e2290c1461090d578063790490171461094e5780637b30ed431461096357806385a2124614610a115780638da5cb5b14610a265780638fd3ab8014610a3b57610293565b80633d8e36a3116101fe578063593b79fe116101b7578063593b79fe146107215780635fb6c6ed146107c9578063662d45a2146107de5780636d8018b8146108115780636f4d469b1461082657806371cdfd68146108d457610293565b80633d8e36a31461059f5780633ebff90e146105b45780634bee9137146105c95780634d6b976f146106045780634e40ea64146106d95780634e71e0c81461070c57610293565b80631a79246c116102505780631a79246c146104065780632b94411f146104de5780632df3eba4146105195780632e0d42121461052e578063331beb5f14610561578063392e53cd1461057657610293565b80630600a8651461029857806309a6400b146102bf578063131b9c04146102f45780631796621a14610327578063187ac4cb146103d557610293565b3661029357005b600080fd5b3480156102a457600080fd5b506102ad61109b565b60408051918252519081900360200190f35b3480156102cb57600080fd5b506102f2600480360360208110156102e257600080fd5b50356001600160a01b03166110ba565b005b34801561030057600080fd5b506102ad6004803603602081101561031757600080fd5b50356001600160a01b03166111da565b34801561033357600080fd5b506102f26004803603602081101561034a57600080fd5b810190602081018135600160201b81111561036457600080fd5b82018360208201111561037657600080fd5b803590602001918460208302840111600160201b8311171561039757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061128a945050505050565b3480156103e157600080fd5b506103ea611309565b604080516001600160a01b039092168252519081900360200190f35b34801561041257600080fd5b506102ad600480360360a081101561042957600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b81111561046a57600080fd5b82018360208201111561047c57600080fd5b803590602001918460018302840111600160201b8311171561049d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611318945050505050565b3480156104ea57600080fd5b506102ad6004803603604081101561050157600080fd5b506001600160a01b0381351690602001351515611382565b34801561052557600080fd5b506102ad61139e565b34801561053a57600080fd5b506102ad6004803603602081101561055157600080fd5b50356001600160a01b03166113a4565b34801561056d57600080fd5b506102ad6113cd565b34801561058257600080fd5b5061058b611542565b604080519115158252519081900360200190f35b3480156105ab57600080fd5b506102ad611553565b3480156105c057600080fd5b506102ad611559565b3480156105d557600080fd5b506102ad600480360360408110156105ec57600080fd5b506001600160a01b038135169060200135151561155f565b34801561061057600080fd5b506102f2600480360360a081101561062757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561065a57600080fd5b82018360208201111561066c57600080fd5b803590602001918460208302840111600160201b8311171561068d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b038335169350505060200135611574565b3480156106e557600080fd5b506102f2600480360360208110156106fc57600080fd5b50356001600160a01b0316611762565b34801561071857600080fd5b506102f26118cb565b34801561072d57600080fd5b506107546004803603602081101561074457600080fd5b50356001600160a01b0316611981565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561078e578181015183820152602001610776565b50505050905090810190601f1680156107bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107d557600080fd5b506102ad6119a5565b3480156107ea57600080fd5b506102f26004803603602081101561080157600080fd5b50356001600160a01b03166119ab565b34801561081d57600080fd5b506102ad611acf565b34801561083257600080fd5b506102f26004803603602081101561084957600080fd5b810190602081018135600160201b81111561086357600080fd5b82018360208201111561087557600080fd5b803590602001918460208302840111600160201b8311171561089657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ad5945050505050565b3480156108e057600080fd5b506102f2600480360360408110156108f757600080fd5b506001600160a01b038135169060200135611b71565b34801561091957600080fd5b506102ad6004803603606081101561093057600080fd5b506001600160a01b0381351690602081013590604001351515611c42565b34801561095a57600080fd5b506102ad611c58565b34801561096f57600080fd5b506102f26004803603602081101561098657600080fd5b810190602081018135600160201b8111156109a057600080fd5b8201836020820111156109b257600080fd5b803590602001918460208302840111600160201b831117156109d357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c5e945050505050565b348015610a1d57600080fd5b506102ad611c8e565b348015610a3257600080fd5b506103ea611c94565b348015610a4757600080fd5b506102f2611ca3565b348015610a5c57600080fd5b50610a8360048036036020811015610a7357600080fd5b50356001600160a01b03166122f5565b60405180856002811115610a9357fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610ac857600080fd5b5061058b60048036036080811015610adf57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610b1957600080fd5b820183602082011115610b2b57600080fd5b803590602001918460018302840111600160201b83111715610b4c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612320945050505050565b348015610b9957600080fd5b5061058b60048036036060811015610bb057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610bdf57600080fd5b820183602082011115610bf157600080fd5b803590602001918460018302840111600160201b83111715610c1257600080fd5b509092509050612521565b348015610c2957600080fd5b506102ad60048036036040811015610c4057600080fd5b810190602081018135600160201b811115610c5a57600080fd5b820183602082011115610c6c57600080fd5b803590602001918460208302840111600160201b83111715610c8d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050612552565b348015610cd957600080fd5b506102ad60048036036020811015610cf057600080fd5b50356001600160a01b031661259f565b348015610d0c57600080fd5b506102f260048036036040811015610d2357600080fd5b506001600160a01b038135169060200135612617565b348015610d4557600080fd5b506103ea61288d565b348015610d5a57600080fd5b50610d8160048036036020811015610d7157600080fd5b50356001600160a01b031661289c565b60405180826002811115610d9157fe5b60ff16815260200191505060405180910390f35b348015610db157600080fd5b50610dba6128b1565b604051808260c080838360005b83811015610ddf578181015183820152602001610dc7565b5050505090500191505060405180910390f35b348015610dfe57600080fd5b506102f260048036036020811015610e1557600080fd5b50356001600160a01b03166128f7565b348015610e3157600080fd5b506103ea612afd565b348015610e4657600080fd5b506102ad60048036036080811015610e5d57600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610e9957600080fd5b820183602082011115610eab57600080fd5b803590602001918460018302840111600160201b83111715610ecc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612b0c945050505050565b348015610f1957600080fd5b506102f260048036036060811015610f3057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610f5f57600080fd5b820183602082011115610f7157600080fd5b803590602001918460018302840111600160201b83111715610f9257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612b7e945050505050565b348015610fdf57600080fd5b506103ea612b86565b348015610ff457600080fd5b506102f26004803603602081101561100b57600080fd5b5035612b95565b34801561101e57600080fd5b506102ad6004803603606081101561103557600080fd5b506001600160a01b0381351690602081013590604001351515612c2b565b34801561105f57600080fd5b506102f26004803603602081101561107657600080fd5b50356001600160a01b0316612ca0565b34801561109257600080fd5b506103ea612d0d565b60006110b4600654600554612d1c90919063ffffffff16565b90505b90565b6000546001600160a01b03163314611105576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600e602052604090205460ff16600281111561112e57fe5b14611177576040805162461bcd60e51b8152602060048201526014602482015273195c9c9bdc97db9bdd1058dd1a5d995059d95b9d60621b604482015290519081900360640190fd5b6001600160a01b0381166000818152600e6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a2600a546111d490600163ffffffff612d1c16565b600a5550565b6001600160a01b0381166000908152600d6020526040812081815460ff16600281111561120357fe5b1415611248576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6001815460ff16600281111561125a57fe5b1461126657600061127d565b600281015460095461127d9163ffffffff612d1c16565b6001909101540192915050565b6000546001600160a01b031633146112d5576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b8151811015611305576112fd8282815181106112f057fe5b60200260200101516119ab565b6001016112d8565b5050565b600c546001600160a01b031681565b600061132686868685612320565b61136c576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b61137886868686612d5e565b9695505050505050565b600061139783611391336113a4565b84611c42565b9392505050565b60055481565b60006113c76113b28361259f565b6113bb846111da565b9063ffffffff612d1c16565b92915050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b505050506040513d602081101561144757600080fd5b50519050600061146561145861109b565b839063ffffffff612d1c16565b90508015806114745750600754155b15611484576000925050506110b7565b600061149b600754836130ed90919063ffffffff16565b6009549091506114b1908263ffffffff61312f16565b6009556005546114c7908363ffffffff61312f16565b6005556040805183815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a160075460408051838152602081019290925280517f24a9873073eba764d17ef9fa7475b3b209c02e6e6f7ed991c9c80e09226a37a79281900390910190a15091505090565b6002546001600160a01b0316151590565b60085481565b600a5481565b60006113978361156e856113a4565b84612c2b565b61157c611542565b156115ce576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c7265616479496e697469616c697a65640000000000000000604482015290519081900360640190fd5b600080546001600160a01b03199081163317909155600c80546001600160a01b038781169190931617908190556040805163836c081d60e01b81529051919092169163836c081d916004808301926020929190829003018186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d602081101561165f57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556116898361128a565b600c60009054906101000a90046001600160a01b03166001600160a01b031663533426d16040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d602081101561170157600080fd5b5051600380546001600160a01b03199081166001600160a01b03938416179091556004805490911691841691909117905561173b81612b95565b5050600080546001600160a01b0319166001600160a01b0394909416939093179092555050565b336001600160a01b038216148061179657506001336000908152600e602052604090205460ff16600281111561179457fe5b145b6117dc576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b6001600160a01b0381166000908152600d602052604090206001815460ff16600281111561180657fe5b14611850576040805162461bcd60e51b815260206004820152601560248201527432b93937b92fb737ba20b1ba34bb32a6b2b6b132b960591b604482015290519081900360640190fd5b611859826111da565b600182810191909155815460ff1916600217825560075461187991612d1c565b60075560085461189090600163ffffffff61312f16565b6008556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b0316331461191d576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60075481565b6000546001600160a01b031633146119f6576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600e602052604090205460ff166002811115611a1f57fe5b1415611a72576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c72656164794163746976654167656e740000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000818152600e6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a2600a546111d490600163ffffffff61312f16565b60095481565b6001336000908152600e602052604090205460ff166002811115611af557fe5b14611b41576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b60005b815181101561130557611b69828281518110611b5c57fe5b60200260200101516128f7565b600101611b44565b80611b7b336113a4565b1015611bca576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b336000908152600d602052604090206003810154611bee908363ffffffff61312f16565b6003820155611bfd8383613189565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b6000611c5033858585612d5e565b949350505050565b600b5481565b60005b815181101561130557611c86828281518110611c7957fe5b6020026020010151611762565b600101611c61565b60065481565b6000546001600160a01b031681565b6000546001600160a01b03163314611cee576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600c546040805163533426d160e01b815290516000926001600160a01b03169163533426d1916004808301926020929190829003018186803b158015611d3357600080fd5b505afa158015611d47573d6000803e3d6000fd5b505050506040513d6020811015611d5d57600080fd5b505190506001600160a01b03811615801590611d8757506003546001600160a01b03828116911614155b15611de3576003546040516001600160a01b03918216918316907f5d82b60ad3cf3639e02e96994b2b10060c4c0a7c0214695baa228363fb910c3490600090a3600380546001600160a01b0319166001600160a01b0383161790555b600c546040805163836c081d60e01b815290516000926001600160a01b03169163836c081d916004808301926020929190829003018186803b158015611e2857600080fd5b505afa158015611e3c573d6000803e3d6000fd5b505050506040513d6020811015611e5257600080fd5b505190506001600160a01b03811615801590611e7c57506002546001600160a01b03828116911614155b8015611f065750600254600c546040805163598e388560e11b815290516001600160a01b03938416939092169163b31c710a91600480820192602092909190829003018186803b158015611ecf57600080fd5b505afa158015611ee3573d6000803e3d6000fd5b505050506040513d6020811015611ef957600080fd5b50516001600160a01b0316145b1561130557611f136113cd565b50600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d6020811015611f8957600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d602081101561200157600080fd5b50519050811561228c57600254600c546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018690529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561206457600080fd5b505af1158015612078573d6000803e3d6000fd5b505050506040513d602081101561208e57600080fd5b5050600c5460408051634a5c8c6f60e11b81526004810185905290516001600160a01b03909216916394b918de9160248082019260009290919082900301818387803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b5050600254604080516370a0823160e01b815230600482015290516001600160a01b0390921693506370a082319250602480820192602092909190829003018186803b15801561214057600080fd5b505afa158015612154573d6000803e3d6000fd5b505050506040513d602081101561216a57600080fd5b5051156121b0576040805162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b9cd7db9bdd17dcd95b9d608a1b604482015290519081900360640190fd5b8161224382856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d602081101561223557600080fd5b50519063ffffffff612d1c16565b101561228c576040805162461bcd60e51b81526020600482015260136024820152721d1bdad95b9cd7db9bdd17dc9958d95a5d9959606a1b604482015290519081900360640190fd5b6002546040805184815290516001600160a01b03928316928616917fd05a160a091ef7d70215da5058f251bcba4363a35c404ba3345403d4cf86b0e1919081900360200190a35050600280546001600160a01b0383166001600160a01b03199091161790555050565b600d60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60008151604114612378576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b81101561239757601b015b8060ff16601b14806123ac57508060ff16601c145b6123fd576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b600087873061240b8c61259f565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156124f9573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c81169116149650505050505050949350505050565b6002546000906001600160a01b0316331461253e57506000611c50565b6125466113cd565b50600195945050505050565b600080805b84518110156125975761258d61258086838151811061257257fe5b60200260200101518661155f565b839063ffffffff61312f16565b9150600101612557565b509392505050565b6001600160a01b0381166000908152600d6020526040812081815460ff1660028111156125c857fe5b141561260d576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6003015492915050565b6126218282613189565b600554612634908263ffffffff61312f16565b6005556040805182815290516001600160a01b0384169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a3600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156126c257600080fd5b505afa1580156126d6573d6000803e3d6000fd5b505050506040513d60208110156126ec57600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b15801561274b57600080fd5b505af115801561275f573d6000803e3d6000fd5b505050506040513d602081101561277557600080fd5b50516127b9576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561280457600080fd5b505afa158015612818573d6000803e3d6000fd5b505050506040513d602081101561282e57600080fd5b5051905082612843828463ffffffff612d1c16565b1015612887576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b50505050565b6004546001600160a01b031681565b600e6020526000908152604090205460ff1681565b6128b96132f0565b6040518060c0016040528060055481526020016006548152602001600754815260200160085481526020016009548152602001600a54815250905090565b6001336000908152600e602052604090205460ff16600281111561291757fe5b14612963576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600d602052604090206001815460ff16600281111561298d57fe5b14156129d6576040805162461bcd60e51b815260206004820152601360248201527232b93937b92fb0b63932b0b23ca6b2b6b132b960691b604482015290519081900360640190fd5b6002815460ff1660028111156129e857fe5b1415612a0657600854612a0290600163ffffffff612d1c16565b6008555b600080825460ff166002811115612a1957fe5b148015612a275750600b5415155b8015612a355750600b544710155b825460ff1916600190811784556009546002850155600754919250612a5a919061312f565b6007556040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a28015612af857600b546040516001600160a01b0385169180156108fc02916000818181858888f1935050505015612af857600b5460408051918252517f55e2724f03f2711a94cf86d8b10c57130b103d6c2f1726076fbf9430340d41e79181900360200190a15b505050565b6003546001600160a01b031681565b6000612b1b8585600085612320565b612b61576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b612b758585612b6f886113a4565b86612d5e565b95945050505050565b6128876113cd565b6001546001600160a01b031681565b6000546001600160a01b03163314612be0576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600b54811415612bef57612c28565b600b8190556040805182815290517f749d0aa4ca45d6142166deb1820b64a888996311bb9f74a88c081f5b041d949c9181900360200190a15b50565b6000336001600160a01b0385161480612c4e57506000546001600160a01b031633145b612c94576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b611c5084858585612d5e565b6000546001600160a01b03163314612ceb576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b600061139783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506131f4565b600082612d6d57506000611c50565b612d76856113a4565b831115612dc6576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b6001600160a01b0385166000908152600d602052604090206003810154612df3908563ffffffff61312f16565b6003820155600654612e0b908563ffffffff61312f16565b6006558215612f62576002546003546001600160a01b0391821691634000aea0911686612e3789611981565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612ea1578181015183820152602001612e89565b50505050905090810190601f168015612ece5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612eef57600080fd5b505af1158015612f03573d6000803e3d6000fd5b505050506040513d6020811015612f1957600080fd5b5051612f5d576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6130a4565b6002546001600160a01b0316634000aea08686612f7e8a611981565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612fe8578181015183820152602001612fd0565b50505050905090810190601f1680156130155780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561303657600080fd5b505af115801561304a573d6000803e3d6000fd5b505050506040513d602081101561306057600080fd5b50516130a4576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b600061139783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061328b565b600082820183811015611397576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600d6020526040902060018101546131b6908363ffffffff61312f16565b60018201556000815460ff1660028111156131cd57fe5b1415612af857805460ff191660021781556008546131ec90600161312f565b600855505050565b600081848411156132835760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613248578181015183820152602001613230565b50505050905090810190601f1680156132755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836132da5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613248578181015183820152602001613230565b5060008385816132e657fe5b0495945050505050565b6040518060c00160405280600690602082028036833750919291505056fea2646970667358221220863b7108ef056e960a922bfb5317393dbce53fb0202eb3687126289e75f157ca64736f6c63430006060033";

    public static final String FUNC_ACTIVEMEMBERCOUNT = "activeMemberCount";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_DATAUNIONMAINNET = "dataUnionMainnet";

    public static final String FUNC_INACTIVEMEMBERCOUNT = "inactiveMemberCount";

    public static final String FUNC_JOINPARTAGENTCOUNT = "joinPartAgentCount";

    public static final String FUNC_JOINPARTAGENTS = "joinPartAgents";

    public static final String FUNC_LIFETIMEMEMBEREARNINGS = "lifetimeMemberEarnings";

    public static final String FUNC_MEMBERDATA = "memberData";

    public static final String FUNC_MIGRATIONMANAGER = "migrationManager";

    public static final String FUNC_NEWMEMBERETH = "newMemberEth";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGOWNER = "pendingOwner";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_TOKENMEDIATOR = "tokenMediator";

    public static final String FUNC_TOTALEARNINGS = "totalEarnings";

    public static final String FUNC_TOTALEARNINGSWITHDRAWN = "totalEarningsWithdrawn";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISINITIALIZED = "isInitialized";

    public static final String FUNC_ONTOKENTRANSFER = "onTokenTransfer";

    public static final String FUNC_ONTOKENBRIDGED = "onTokenBridged";

    public static final String FUNC_GETSTATS = "getStats";

    public static final String FUNC_SETNEWMEMBERETH = "setNewMemberEth";

    public static final String FUNC_GETEARNINGS = "getEarnings";

    public static final String FUNC_GETWITHDRAWN = "getWithdrawn";

    public static final String FUNC_GETWITHDRAWABLEEARNINGS = "getWithdrawableEarnings";

    public static final String FUNC_TOTALWITHDRAWABLE = "totalWithdrawable";

    public static final String FUNC_ADDJOINPARTAGENTS = "addJoinPartAgents";

    public static final String FUNC_ADDJOINPARTAGENT = "addJoinPartAgent";

    public static final String FUNC_REMOVEJOINPARTAGENT = "removeJoinPartAgent";

    public static final String FUNC_REFRESHREVENUE = "refreshRevenue";

    public static final String FUNC_ADDMEMBER = "addMember";

    public static final String FUNC_PARTMEMBER = "partMember";

    public static final String FUNC_ADDMEMBERS = "addMembers";

    public static final String FUNC_PARTMEMBERS = "partMembers";

    public static final String FUNC_TRANSFERTOMEMBERINCONTRACT = "transferToMemberInContract";

    public static final String FUNC_TRANSFERWITHINCONTRACT = "transferWithinContract";

    public static final String FUNC_WITHDRAWMEMBERS = "withdrawMembers";

    public static final String FUNC_WITHDRAWALL = "withdrawAll";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWALLTO = "withdrawAllTo";

    public static final String FUNC_WITHDRAWTO = "withdrawTo";

    public static final String FUNC_SIGNATUREISVALID = "signatureIsValid";

    public static final String FUNC_WITHDRAWALLTOSIGNED = "withdrawAllToSigned";

    public static final String FUNC_WITHDRAWTOSIGNED = "withdrawToSigned";

    public static final String FUNC_TOBYTES = "toBytes";

    public static final String FUNC_MIGRATE = "migrate";

    public static final Event EARNINGSWITHDRAWN_EVENT = new Event("EarningsWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event JOINPARTAGENTADDED_EVENT = new Event("JoinPartAgentAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event JOINPARTAGENTREMOVED_EVENT = new Event("JoinPartAgentRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MEMBERJOINED_EVENT = new Event("MemberJoined", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MEMBERPARTED_EVENT = new Event("MemberParted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MIGRATEMEDIATOR_EVENT = new Event("MigrateMediator", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MIGRATETOKEN_EVENT = new Event("MigrateToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWEARNINGS_EVENT = new Event("NewEarnings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWMEMBERETHSENT_EVENT = new Event("NewMemberEthSent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVENUERECEIVED_EVENT = new Event("RevenueReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERTOADDRESSINCONTRACT_EVENT = new Event("TransferToAddressInContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERWITHINCONTRACT_EVENT = new Event("TransferWithinContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATENEWMEMBERETH_EVENT = new Event("UpdateNewMemberEth", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected DataUnionSidechain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DataUnionSidechain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DataUnionSidechain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DataUnionSidechain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<EarningsWithdrawnEventResponse> getEarningsWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EARNINGSWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<EarningsWithdrawnEventResponse> responses = new ArrayList<EarningsWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EarningsWithdrawnEventResponse typedResponse = new EarningsWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EarningsWithdrawnEventResponse> earningsWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EarningsWithdrawnEventResponse>() {
            @Override
            public EarningsWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EARNINGSWITHDRAWN_EVENT, log);
                EarningsWithdrawnEventResponse typedResponse = new EarningsWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<EarningsWithdrawnEventResponse> earningsWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EARNINGSWITHDRAWN_EVENT));
        return earningsWithdrawnEventFlowable(filter);
    }

    public List<JoinPartAgentAddedEventResponse> getJoinPartAgentAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINPARTAGENTADDED_EVENT, transactionReceipt);
        ArrayList<JoinPartAgentAddedEventResponse> responses = new ArrayList<JoinPartAgentAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JoinPartAgentAddedEventResponse typedResponse = new JoinPartAgentAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JoinPartAgentAddedEventResponse> joinPartAgentAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JoinPartAgentAddedEventResponse>() {
            @Override
            public JoinPartAgentAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINPARTAGENTADDED_EVENT, log);
                JoinPartAgentAddedEventResponse typedResponse = new JoinPartAgentAddedEventResponse();
                typedResponse.log = log;
                typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<JoinPartAgentAddedEventResponse> joinPartAgentAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINPARTAGENTADDED_EVENT));
        return joinPartAgentAddedEventFlowable(filter);
    }

    public List<JoinPartAgentRemovedEventResponse> getJoinPartAgentRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINPARTAGENTREMOVED_EVENT, transactionReceipt);
        ArrayList<JoinPartAgentRemovedEventResponse> responses = new ArrayList<JoinPartAgentRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JoinPartAgentRemovedEventResponse typedResponse = new JoinPartAgentRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JoinPartAgentRemovedEventResponse> joinPartAgentRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JoinPartAgentRemovedEventResponse>() {
            @Override
            public JoinPartAgentRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINPARTAGENTREMOVED_EVENT, log);
                JoinPartAgentRemovedEventResponse typedResponse = new JoinPartAgentRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.agent = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<JoinPartAgentRemovedEventResponse> joinPartAgentRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINPARTAGENTREMOVED_EVENT));
        return joinPartAgentRemovedEventFlowable(filter);
    }

    public List<MemberJoinedEventResponse> getMemberJoinedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MEMBERJOINED_EVENT, transactionReceipt);
        ArrayList<MemberJoinedEventResponse> responses = new ArrayList<MemberJoinedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MemberJoinedEventResponse typedResponse = new MemberJoinedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MemberJoinedEventResponse> memberJoinedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MemberJoinedEventResponse>() {
            @Override
            public MemberJoinedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MEMBERJOINED_EVENT, log);
                MemberJoinedEventResponse typedResponse = new MemberJoinedEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MemberJoinedEventResponse> memberJoinedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MEMBERJOINED_EVENT));
        return memberJoinedEventFlowable(filter);
    }

    public List<MemberPartedEventResponse> getMemberPartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MEMBERPARTED_EVENT, transactionReceipt);
        ArrayList<MemberPartedEventResponse> responses = new ArrayList<MemberPartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MemberPartedEventResponse typedResponse = new MemberPartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MemberPartedEventResponse> memberPartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MemberPartedEventResponse>() {
            @Override
            public MemberPartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MEMBERPARTED_EVENT, log);
                MemberPartedEventResponse typedResponse = new MemberPartedEventResponse();
                typedResponse.log = log;
                typedResponse.member = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MemberPartedEventResponse> memberPartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MEMBERPARTED_EVENT));
        return memberPartedEventFlowable(filter);
    }

    public List<MigrateMediatorEventResponse> getMigrateMediatorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MIGRATEMEDIATOR_EVENT, transactionReceipt);
        ArrayList<MigrateMediatorEventResponse> responses = new ArrayList<MigrateMediatorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MigrateMediatorEventResponse typedResponse = new MigrateMediatorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newMediator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.oldMediator = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MigrateMediatorEventResponse> migrateMediatorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MigrateMediatorEventResponse>() {
            @Override
            public MigrateMediatorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MIGRATEMEDIATOR_EVENT, log);
                MigrateMediatorEventResponse typedResponse = new MigrateMediatorEventResponse();
                typedResponse.log = log;
                typedResponse.newMediator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.oldMediator = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<MigrateMediatorEventResponse> migrateMediatorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MIGRATEMEDIATOR_EVENT));
        return migrateMediatorEventFlowable(filter);
    }

    public List<MigrateTokenEventResponse> getMigrateTokenEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MIGRATETOKEN_EVENT, transactionReceipt);
        ArrayList<MigrateTokenEventResponse> responses = new ArrayList<MigrateTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MigrateTokenEventResponse typedResponse = new MigrateTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newToken = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.oldToken = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amountMigrated = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MigrateTokenEventResponse> migrateTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MigrateTokenEventResponse>() {
            @Override
            public MigrateTokenEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MIGRATETOKEN_EVENT, log);
                MigrateTokenEventResponse typedResponse = new MigrateTokenEventResponse();
                typedResponse.log = log;
                typedResponse.newToken = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.oldToken = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amountMigrated = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MigrateTokenEventResponse> migrateTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MIGRATETOKEN_EVENT));
        return migrateTokenEventFlowable(filter);
    }

    public List<NewEarningsEventResponse> getNewEarningsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWEARNINGS_EVENT, transactionReceipt);
        ArrayList<NewEarningsEventResponse> responses = new ArrayList<NewEarningsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewEarningsEventResponse typedResponse = new NewEarningsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.earningsPerMember = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.activeMemberCount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewEarningsEventResponse> newEarningsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewEarningsEventResponse>() {
            @Override
            public NewEarningsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWEARNINGS_EVENT, log);
                NewEarningsEventResponse typedResponse = new NewEarningsEventResponse();
                typedResponse.log = log;
                typedResponse.earningsPerMember = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.activeMemberCount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewEarningsEventResponse> newEarningsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWEARNINGS_EVENT));
        return newEarningsEventFlowable(filter);
    }

    public List<NewMemberEthSentEventResponse> getNewMemberEthSentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMEMBERETHSENT_EVENT, transactionReceipt);
        ArrayList<NewMemberEthSentEventResponse> responses = new ArrayList<NewMemberEthSentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewMemberEthSentEventResponse typedResponse = new NewMemberEthSentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amountWei = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewMemberEthSentEventResponse> newMemberEthSentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewMemberEthSentEventResponse>() {
            @Override
            public NewMemberEthSentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMEMBERETHSENT_EVENT, log);
                NewMemberEthSentEventResponse typedResponse = new NewMemberEthSentEventResponse();
                typedResponse.log = log;
                typedResponse.amountWei = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewMemberEthSentEventResponse> newMemberEthSentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMEMBERETHSENT_EVENT));
        return newMemberEthSentEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RevenueReceivedEventResponse> getRevenueReceivedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REVENUERECEIVED_EVENT, transactionReceipt);
        ArrayList<RevenueReceivedEventResponse> responses = new ArrayList<RevenueReceivedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RevenueReceivedEventResponse typedResponse = new RevenueReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevenueReceivedEventResponse> revenueReceivedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RevenueReceivedEventResponse>() {
            @Override
            public RevenueReceivedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REVENUERECEIVED_EVENT, log);
                RevenueReceivedEventResponse typedResponse = new RevenueReceivedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RevenueReceivedEventResponse> revenueReceivedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVENUERECEIVED_EVENT));
        return revenueReceivedEventFlowable(filter);
    }

    public List<TransferToAddressInContractEventResponse> getTransferToAddressInContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERTOADDRESSINCONTRACT_EVENT, transactionReceipt);
        ArrayList<TransferToAddressInContractEventResponse> responses = new ArrayList<TransferToAddressInContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferToAddressInContractEventResponse typedResponse = new TransferToAddressInContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferToAddressInContractEventResponse> transferToAddressInContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferToAddressInContractEventResponse>() {
            @Override
            public TransferToAddressInContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERTOADDRESSINCONTRACT_EVENT, log);
                TransferToAddressInContractEventResponse typedResponse = new TransferToAddressInContractEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferToAddressInContractEventResponse> transferToAddressInContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERTOADDRESSINCONTRACT_EVENT));
        return transferToAddressInContractEventFlowable(filter);
    }

    public List<TransferWithinContractEventResponse> getTransferWithinContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERWITHINCONTRACT_EVENT, transactionReceipt);
        ArrayList<TransferWithinContractEventResponse> responses = new ArrayList<TransferWithinContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferWithinContractEventResponse typedResponse = new TransferWithinContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferWithinContractEventResponse> transferWithinContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferWithinContractEventResponse>() {
            @Override
            public TransferWithinContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERWITHINCONTRACT_EVENT, log);
                TransferWithinContractEventResponse typedResponse = new TransferWithinContractEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferWithinContractEventResponse> transferWithinContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERWITHINCONTRACT_EVENT));
        return transferWithinContractEventFlowable(filter);
    }

    public List<UpdateNewMemberEthEventResponse> getUpdateNewMemberEthEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATENEWMEMBERETH_EVENT, transactionReceipt);
        ArrayList<UpdateNewMemberEthEventResponse> responses = new ArrayList<UpdateNewMemberEthEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateNewMemberEthEventResponse typedResponse = new UpdateNewMemberEthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateNewMemberEthEventResponse> updateNewMemberEthEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateNewMemberEthEventResponse>() {
            @Override
            public UpdateNewMemberEthEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATENEWMEMBERETH_EVENT, log);
                UpdateNewMemberEthEventResponse typedResponse = new UpdateNewMemberEthEventResponse();
                typedResponse.log = log;
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateNewMemberEthEventResponse> updateNewMemberEthEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATENEWMEMBERETH_EVENT));
        return updateNewMemberEthEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> activeMemberCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVEMEMBERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIMOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> dataUnionMainnet() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DATAUNIONMAINNET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> inactiveMemberCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INACTIVEMEMBERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> joinPartAgentCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JOINPARTAGENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint8> joinPartAgents(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JOINPARTAGENTS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> lifetimeMemberEarnings() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIFETIMEMEMBEREARNINGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple4<Uint8, Uint256, Uint256, Uint256>> memberData(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MEMBERDATA, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Uint8, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple4<Uint8, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple4<Uint8, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Uint8, Uint256, Uint256, Uint256>(
                                (Uint8) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3));
                    }
                });
    }

    public RemoteFunctionCall<Address> migrationManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIGRATIONMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> newMemberEth() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NEWMEMBERETH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> pendingOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PENDINGOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> tokenMediator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENMEDIATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalEarnings() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALEARNINGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalEarningsWithdrawn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALEARNINGSWITHDRAWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Address initialOwner, Address _migrationManager, DynamicArray<Address> initialJoinPartAgents, Address mainnetDataUnionAddress, Uint256 defaultNewMemberEth) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(initialOwner, _migrationManager, initialJoinPartAgents, mainnetDataUnionAddress, defaultNewMemberEth), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isInitialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISINITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onTokenTransfer(Address param0, Uint256 param1, DynamicBytes param2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONTOKENTRANSFER, 
                Arrays.<Type>asList(param0, param1, param2), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onTokenBridged(Address param0, Uint256 param1, DynamicBytes param2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONTOKENBRIDGED, 
                Arrays.<Type>asList(param0, param1, param2), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<StaticArray6<Uint256>> getStats() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray6<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNewMemberEth(Uint256 val) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNEWMEMBERETH, 
                Arrays.<Type>asList(val), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getEarnings(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEARNINGS, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getWithdrawn(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWITHDRAWN, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getWithdrawableEarnings(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWITHDRAWABLEEARNINGS, 
                Arrays.<Type>asList(member), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalWithdrawable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALWITHDRAWABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addJoinPartAgents(DynamicArray<Address> agents) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDJOINPARTAGENTS, 
                Arrays.<Type>asList(agents), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addJoinPartAgent(Address agent) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDJOINPARTAGENT, 
                Arrays.<Type>asList(agent), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeJoinPartAgent(Address agent) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEJOINPARTAGENT, 
                Arrays.<Type>asList(agent), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refreshRevenue() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFRESHREVENUE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addMember(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMEMBER, 
                Arrays.<Type>asList(member), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> partMember(Address member) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PARTMEMBER, 
                Arrays.<Type>asList(member), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addMembers(DynamicArray<Address> members) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMEMBERS, 
                Arrays.<Type>asList(members), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> partMembers(DynamicArray<Address> members) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PARTMEMBERS, 
                Arrays.<Type>asList(members), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferToMemberInContract(Address recipient, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERTOMEMBERINCONTRACT, 
                Arrays.<Type>asList(recipient, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferWithinContract(Address recipient, Uint256 amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERWITHINCONTRACT, 
                Arrays.<Type>asList(recipient, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawMembers(DynamicArray<Address> members, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWMEMBERS, 
                Arrays.<Type>asList(members, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAll(Address member, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALL, 
                Arrays.<Type>asList(member, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(Address member, Uint256 amount, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(member, amount, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAllTo(Address to, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALLTO, 
                Arrays.<Type>asList(to, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawTo(Address to, Uint256 amount, Bool sendToMainnet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTO, 
                Arrays.<Type>asList(to, amount, sendToMainnet), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> signatureIsValid(Address signer, Address recipient, Uint256 amount, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SIGNATUREISVALID, 
                Arrays.<Type>asList(signer, recipient, amount, signature), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAllToSigned(Address fromSigner, Address to, Bool sendToMainnet, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALLTOSIGNED, 
                Arrays.<Type>asList(fromSigner, to, sendToMainnet, signature), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToSigned(Address fromSigner, Address to, Uint256 amount, Bool sendToMainnet, DynamicBytes signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWTOSIGNED, 
                Arrays.<Type>asList(fromSigner, to, amount, sendToMainnet, signature), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicBytes> toBytes(Address a) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBYTES, 
                Arrays.<Type>asList(a), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> migrate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MIGRATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DataUnionSidechain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataUnionSidechain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DataUnionSidechain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataUnionSidechain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DataUnionSidechain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DataUnionSidechain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DataUnionSidechain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DataUnionSidechain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DataUnionSidechain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DataUnionSidechain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EarningsWithdrawnEventResponse extends BaseEventResponse {
        public Address member;

        public Uint256 amount;
    }

    public static class JoinPartAgentAddedEventResponse extends BaseEventResponse {
        public Address agent;
    }

    public static class JoinPartAgentRemovedEventResponse extends BaseEventResponse {
        public Address agent;
    }

    public static class MemberJoinedEventResponse extends BaseEventResponse {
        public Address member;
    }

    public static class MemberPartedEventResponse extends BaseEventResponse {
        public Address member;
    }

    public static class MigrateMediatorEventResponse extends BaseEventResponse {
        public Address newMediator;

        public Address oldMediator;
    }

    public static class MigrateTokenEventResponse extends BaseEventResponse {
        public Address newToken;

        public Address oldToken;

        public Uint256 amountMigrated;
    }

    public static class NewEarningsEventResponse extends BaseEventResponse {
        public Uint256 earningsPerMember;

        public Uint256 activeMemberCount;
    }

    public static class NewMemberEthSentEventResponse extends BaseEventResponse {
        public Uint256 amountWei;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class RevenueReceivedEventResponse extends BaseEventResponse {
        public Uint256 amount;
    }

    public static class TransferToAddressInContractEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 amount;
    }

    public static class TransferWithinContractEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 amount;
    }

    public static class UpdateNewMemberEthEventResponse extends BaseEventResponse {
        public Uint256 value;
    }
}
